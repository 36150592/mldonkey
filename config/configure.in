AC_REVISION(norev)
AC_PREREQ(2.0)
AC_INIT(Makefile.config.in)
AC_CONFIG_HEADER(config.h)

CONFIG_ARGS_DEFINED=yes
CONFIG_ARGS=$*
echo $CONFIG_ARGS

CURRENT_VERSION=2.4
CURRENT_RELEASE=1

REQUIRED_OCAML=3.06
REQUIRED_LABLGTK=1.2.4

touch install-sh

BATCH=no
AUDIO_GALAXY=no
OPEN_NAPSTER=yes
GNUTELLA=yes
DIRECT_CONNECT=yes
SOULSEEK=yes
OPENFT=no
CYMES=no
DONKEY=yes
BITTORRENT=yes
FASTTRACK=yes

BUILD_GUI=yes

MULTINET=yes
AC_ARG_ENABLE(multinet, [--disable-multinet:       allows you to only compile support for edonkey], [MULTINET="$enableval"])

AC_ARG_ENABLE(checks, [--enable-checks:       force mldonkey to perform bound checks on array/string access], [CHECKBOUNDS="$enableval"])

if test "$CHECKBOUNDS" = "yes"; then
  CHECKBOUNDS=true
else
  CHECKBOUNDS=false
fi

if test ! "$MULTINET" = "yes"; then
  AUDIO_GALAXY=no
  OPEN_NAPSTER=no
  GNUTELLA=no
  DIRECT_CONNECT=no
  SOULSEEK=no
  OPENFT=no
  CYMES=no
  BITTORRENT=no
  FASTTRACK=no
  RELEASENAME="$RELEASENAME-nomultinet"
fi

AC_ARG_ENABLE(batch, [--enable-batch:       reply YES to all queries in this script], [BATCH="$enableval"])

AC_ARG_ENABLE(audiogalaxy, [--disable-audiogalaxy:       allows you to remove support for Audio Galaxy], [AUDIO_GALAXY="$enableval"])

AC_ARG_ENABLE(opennap, [--disable-opennap:       allows you to remove support for Open Napster], [OPEN_NAPSTER="$enableval"])

AC_ARG_ENABLE(gnutella, [--disable-gnutella:       allows you to remove support for Gnutella], [GNUTELLA="$enableval"])

AC_ARG_ENABLE(directconnect, [--disable-directconnect:       allows you to remove support for Direct Connect], [DIRECT_CONNECT="$enableval"])

AC_ARG_ENABLE(soulseek, [--disable-soulseek:       allows you to remove support for SoulSeek], [SOULSEEK="$enableval"])

AC_ARG_ENABLE(openft, [--disable-openft:       allows you to remove support for OpenFT], [OPENFT="$enableval"])

AC_ARG_ENABLE(cymes, [--disable-cymes:       allows you to remove support for Cymes], [CYMES="$enableval"])

AC_ARG_ENABLE(fasttrack, [--disable-fasttrack:       allows you to remove support for FastTrack], [FASTTRACK="$enableval"])

AC_ARG_ENABLE(bittorrent, [--disable-bittorrent:       allows you to remove support for Bittorent], [BITTORRENT="$enableval"])

AC_ARG_ENABLE(donkey, [--disable-donkey:       allows you to remove support for eDonkey], [DONKEY="$enableval"])

AC_ARG_ENABLE(ocamlver, [--enable-ocamlver=3.06:       allows you to change the required version of ocaml], [REQUIRED_OCAML="$enableval"])

AC_ARG_ENABLE(gui, [--disable-gui:       allows you to remove the GUI], [BUILD_GUI="$enableval"])


PTHREAD_LIBS=no
AC_ARG_ENABLE(pthread, [--enable-pthread :       allows you to add pthread support in mldonkey], [PTHREAD_LIBS="$enableval"])
AC_ARG_ENABLE(pthread-lib, [--enable-pthread-lib :  legacy option], [PTHREAD_LIBS="$enableval"])



IM=yes
AC_ARG_ENABLE(devel, [--enable-devel:       (undocumented)], [DEVEL="$enableval"])

AC_CANONICAL_HOST
AC_CHECK_PROG(CC,gcc3,"gcc3")
AC_PROG_CC
AC_EXEEXT
AC_PROG_CPP

AC_PROG_RANLIB

OCAML_PATH=

AC_CHECK_PROG(GNU_MAKE, gmake, gmake)
AC_CHECK_PROG(GNU_MAKE, make, make)

AC_CHECK_PROG(OCAMLC, ocamlc.opt, ocamlc.opt)
AC_CHECK_PROG(OCAMLC, ocamlc, ocamlrun ocamlc)

cd ..
SOURCE_DIR=`pwd`
cd config

CONFIG_DIR=$SOURCE_DIR/config
PATCH_DIR=$SOURCE_DIR/patches
LOCAL_DIR=$PATCH_DIR/local
BUILD_DIR=$PATCH_DIR/build

AC_ARG_ENABLE(local-prefix, [--enable-local-prefix=prefix:           allows you to specify where you want temporary tools to be installed (prefix must be absolute)], [LOCAL_DIR="$enableval"])

LOCAL=$LOCAL_DIR
LOCAL_OCAML=$LOCAL_DIR/bin



echo $host

case "$host" in
  alpha*-*-osf*)                arch=alpha; system=digital;;
  alpha*-*-linux*)              arch=alpha; system=linux;;
  alpha*-*-freebsd*)            arch=alpha; system=freebsd;;
  alpha*-*-netbsd*)             arch=alpha; system=netbsd;;
  alpha*-*-openbsd*)            arch=alpha; system=openbsd;;
  sparc-*-sunos4.*)             arch=sparc; system=sunos;;
  sparc-*-solaris2.*)           arch=sparc; system=solaris;;
  sparc-*-*bsd*)                arch=sparc; system=bsd;;
  sparc-*-linux*)               arch=sparc; system=linux;;
  i?86-*-linux*)           arch=i386; system=linux;;
  i?86-*-*bsd*)            arch=i386; system=bsd;;
  i?86-*-nextstep*)        arch=i386; system=nextstep;;
  i?86-*-solaris*)         arch=i386; system=solaris;;
  i?86-*-beos*)            arch=i386; system=beos;;
  i?86-*-cygwin*)          arch=i386; system=cygwin;;
  mips-*-irix6*)                arch=mips; system=irix;;
  hppa1.1-*-hpux*)              arch=hppa; system=hpux;;
  hppa1.1-*-nextstep*)          arch=hppa; system=nextstep;;
  rs6000-*-aix*)                arch=power; model=rs6000; system=aix;;
  powerpc-*-aix*)               arch=power; model=ppc; system=aix;;
  powerpc-*-linux*)             arch=power; model=ppc; system=elf;;
  powerpc-*-rhapsody*)          arch=power; model=ppc; system=rhapsody;;
  powerpc-*-darwin*)            arch=power; model=ppc; system=rhapsody
    REQUIRED_OCAML=3.06+27
    
    echo "***************************************************"
    echo
    echo "On Mac OS X, you must use a CVS version of Ocaml"
    echo "($REQUIRED_OCAML for example): you can get a tar.gz"
    echo "from :"
    echo "http://savannah.nongnu.org/download/mldonkey/tools/"
    echo
    echo "***************************************************"
	
    case `uname -r` in
      6.0) CHECKBOUNDS=true;;
    esac
    ;;
  arm*-*-linux*)                arch=arm; system=linux;;
  ia64-*-linux*)                arch=ia64; system=linux;;
esac


BUILD_OCAML=no
if test -z "$ac_cv_prog_OCAMLC"; then 
   BUILD_OCAML=yes
else
   echo "Testing ocaml version"
   OCAMLVERSION=`$OCAMLC -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
   case "$OCAMLVERSION" in
    "$REQUIRED_OCAML"*) ;;
    *) echo "Need build"
       BUILD_OCAML=yes;;
   esac
fi

if test "$BUILD_OCAML" = "yes"; then

  AC_CHECK_FILE("$LOCAL_OCAML"/ocamlc.opt, [
    OCAMLVERSION=`$LOCAL_OCAML/ocamlc.opt -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
   case "$OCAMLVERSION" in
    "$REQUIRED_OCAML"*)
       BUILD_OCAML=no
       OCAMLC=$LOCAL_OCAML/ocamlc.opt
       ac_cv_prog_OCAMLC=$LOCAL_OCAML/ocamlc.opt
       ;;
    *) echo "Need build"
    esac
  ])
fi

AC_CHECK_PROG(RPMBUILD,rpmbuild,rpmbuild)
AC_CHECK_PROG(RPMBUILD,rpm,rpm)
AC_CHECK_PROG(WGET, wget, wget)
if test -z "$ac_cv_prog_WGET"; then 
  $CC -o wget wget.c || echo "Cannot compile wget.c"
  AC_PATH_PROG(WGET, wget,,$SOURCE_DIR/config)  
  ac_cv_prog_WGET="$ac_cv_path_WGET"
fi
WGET="$ac_cv_prog_WGET"

if test "$BUILD_OCAML" = "yes"; then

  echo "********  Objective-Caml $REQUIRED_OCAML is required  *********" 1>&2; 
  echo "*******  Check http://ocaml.inria.fr/  ********" 1>&2; 
  echo "Do you want this script to try to download and install ocaml"
  echo "LOCALLY in mldonkey directory ?"
  if test "$BATCH" = "no"; then read i; else i=yes; fi
  case "$i" in
   y* | Y*) 
      cd $PATCH_DIR
      if test ! -f ocaml-"$REQUIRED_OCAML".tar.gz; then
        echo Downloading ...

#  http://pauillac.inria.fr/caml/distrib/ocaml-"$REQUIRED_OCAML"/ocaml-"$REQUIRED_OCAML".tar.gz

        $WGET  http://savannah.nongnu.org/download/mldonkey/tools/ocaml-"$REQUIRED_OCAML".tar.gz
#        $WGET  http://pauillac.inria.fr/~lefessan/mldonkey/ocaml-"$REQUIRED_OCAML".tar.gz
      fi
      if test ! -f ocaml-"$REQUIRED_OCAML".tar.gz; then exit 1; fi

      echo Uncompressing ...
      mkdir -p $BUILD_DIR
      cd $BUILD_DIR
      rm -rf ocaml-"$REQUIRED_OCAML"
      gzip -cd $PATCH_DIR/ocaml-"$REQUIRED_OCAML".tar.gz | tar vxf -
      cd ocaml-"$REQUIRED_OCAML"
      if test -f $PATCH_DIR/ocaml-"$REQUIRED_OCAML".patch; then
        echo Patching ...
        patch -p1 < $PATCH_DIR/ocaml-"$REQUIRED_OCAML".patch
      fi
      echo Configuring ...
      ./configure -prefix $LOCAL_DIR
      cd config
      cp -f Makefile Makefile.old
      sed "s/OTHERLIBRARIES=.*/OTHERLIBRARIES=unix dynlink num str bigarray threads/" Makefile.old > Makefile
      cd ..
      cp -f $PATCH_DIR/Makefile.ocamldoc ocamldoc/Makefile
      echo Compiling ...
      $GNU_MAKE world opt opt.opt
      echo Installing ...
      $GNU_MAKE install
      cd $BUILD_DIR
      rm -rf ocaml-"$REQUIRED_OCAML"
      cd $CONFIG_DIR
      echo Ocaml locally installed for mldonkey

      if test -f "$LOCAL_OCAML"/ocamlc.opt; then
         OCAMLC=$LOCAL_OCAML/ocamlc.opt
         ac_cv_prog_OCAMLC=$LOCAL_OCAML/ocamlc.opt
      else
      if test -f "$LOCAL_OCAML"/ocamlc; then
         OCAMLC=$LOCAL_OCAML/ocamlc
         ac_cv_prog_OCAMLC=$LOCAL_OCAML/ocamlc
      else
        echo "Ocaml installation failed"; exit 1
      fi
      fi
      ;;
   *)  exit 1;;
  esac
fi

if test "$OCAMLC" = "$LOCAL_OCAML"/ocamlc.opt ; then
  OCAML_PATH="$LOCAL_OCAML"/
  OCAMLOPT=$LOCAL_OCAML/ocamlopt.opt
  OCAMLMKTOP=$LOCAL_OCAML/ocamlmktop
  OCAMLDEP=$LOCAL_OCAML/ocamldep
  OCAMLLEX=$LOCAL_OCAML/ocamllex.opt
  OCAMLYACC=$LOCAL_OCAML/ocamlyacc
  CAMLP4=$LOCAL_OCAML/camlp4
else
  if test "$OCAMLC" = "$LOCAL_OCAML"/ocamlc ; then
  OCAML_PATH="$LOCAL_OCAML"/
  if test -f "$LOCAL_OCAML/ocamlopt"; then
    OCAMLOPT=$LOCAL_OCAML/ocamlopt
  else
    OCAMLOPT=no
  fi
  OCAMLMKTOP=$LOCAL_OCAML/ocamlmktop
  OCAMLDEP=$LOCAL_OCAML/ocamldep
  OCAMLLEX=$LOCAL_OCAML/ocamllex
  OCAMLYACC=$LOCAL_OCAML/ocamlyacc
  CAMLP4=$LOCAL_OCAML/camlp4
  else
  AC_CHECK_PROG(OCAMLOPT, ocamlopt.opt, ocamlopt.opt)
  AC_CHECK_PROG(OCAMLOPT, ocamlopt, ocamlopt, no)
  AC_CHECK_PROG(OCAMLDEP, ocamldep, ocamldep)
  AC_CHECK_PROG(OCAMLLEX, ocamllex.opt, ocamllex.opt)
  AC_CHECK_PROG(OCAMLLEX, ocamllex, ocamllex)
  AC_CHECK_PROG(OCAMLYACC, ocamlyacc, ocamlyacc)
  AC_CHECK_PROG(OCAMLMKTOP, ocamlmktop, ocamlmktop)
  AC_CHECK_PROG(CAMLP4, camlp4, camlp4)
fi
fi

AC_PATH_PROG(PERL, perl, perl)

OCAMLVERSION=`$OCAMLC -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
echo "ocamlc version is $OCAMLVERSION"

case "$OCAMLVERSION" in
 "$REQUIRED_OCAML"*) ;;
 *) 
  echo "********  Version $REQUIRED_OCAML of Objective-Caml is required  *********" 1>&2; 
  echo "*******  Check http://ocaml.inria.fr/  ********" 1>&2; 
  exit 1;
 ;;
esac


if test "$OCAMLOPT" = "no"; then
  TARGET_TYPE=byte
  OCAMLLIB_EXT=cma
else
  TARGET_TYPE=opt
  OCAMLLIB_EXT=cmxa

  OCAMLOPTVERSION=`$OCAMLOPT -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
  echo "ocamlopt version is $OCAMLOPTVERSION"

  test "$OCAMLOPTVERSION" = "$OCAMLVERSION" || {
    echo "********  Version $REQUIRED_OCAML of ocamlopt is required  *********" 1>&2; 
    echo "*******  Check http://ocaml.inria.fr/  ********" 1>&2; 
    exit 1; } 

fi


# Sizes of various common basic types
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(void *)
AC_CHECK_SIZEOF(char)
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(float)
AC_CHECK_SIZEOF(double)

# various header files
AC_CHECK_HEADERS(arpa/inet.h,,)
AC_CHECK_HEADERS(netinet/ip.h,,)

# poll if possible
AC_CHECK_HEADERS(sys/poll.h,,)
AC_CHECK_FUNCS(poll,,)

ZLIB=no
AC_CHECK_LIB(z,inflate,[ZLIB=yes])
AC_CHECK_HEADERS(zlib.h,,[ZLIB=no])

if test "$ZLIB" = "yes"; then
  HAS_ZLIB=true
  ZLIB__UNCOMPRESS_STRING2="Zlib.uncompress_string2 s"
  ZLIB__COMPRESS_STRING="Zlib.compress_string s"
else
  HAS_ZLIB=false
  ZLIB__UNCOMPRESS_STRING2="s"
  ZLIB__COMPRESS_STRING="s"
fi

ICONV=no
AC_CHECK_LIB(iconv,iconv_open,[ICONV=yes])

# On linux plaforms, we will have to check that includes from kernel are
# available.
OS_FILES=unix
case $host in
        *linux*)   
           AC_CHECK_HEADERS(linux/limits.h,, [
             OLD_CPPFLAGS=$CPPFLAGS
             CPPFLAGS="-I /usr/src/linux/include"
             AC_CHECK_HEADER(linux/types.h,[CONFIG_INCLUDES="-I /usr/src/linux/include"])
             CPPFLAGS=$OLD_CPPFLAGS]
           )
        ;;
        *mingw*) OS_FILES=mingw;;
        *)         ;;
esac

AC_MSG_CHECKING(Additionnal includes) 
AC_MSG_RESULT($CONFIG_INCLUDES)

OCAMLLIB=`$OCAMLC -where`

if test -f $OCAMLLIB/lablgl.cma; then
  LABLGL_CMA=lablgl.cma
fi

if test -f $OCAMLLIB/lablgl.$OCAMLLIB_EXT; then
  LABLGL_CMXA=lablgl.$OCAMLLIB_EXT
fi

  if test "$AUDIO_GALAXY" = "yes" ; then
    AC_CHECK_FILE(../src/networks/audio_galaxy,AUDIO_GALAXY=yes, [
      AUDIO_GALAXY=no
      BAD_TARGETS="$BAD_TARGETS audio_galaxy(obsolete)"
    ])
  else
    BAD_TARGETS="$BAD_TARGETS audio_galaxy(obsolete)"
  fi

  if test "$OPEN_NAPSTER" = "yes" ; then
    AC_CHECK_FILE(../src/networks/opennap,OPEN_NAPSTER=yes, [
      OPEN_NAPSTER=no
      BAD_TARGETS="$BAD_TARGETS open_napster"
    ])
  else
    BAD_TARGETS="$BAD_TARGETS open_napster"
  fi

  if test "$DIRECT_CONNECT" = "yes" ; then
    AC_CHECK_FILE(../src/networks/direct_connect,DIRECT_CONNECT=yes, [
      DIRECT_CONNECT=no
      BAD_TARGETS="$BAD_TARGETS direct_connect"
    ])
  else
    BAD_TARGETS="$BAD_TARGETS direct_connect"
  fi

  if test "$GNUTELLA" = "yes"; then
    if test "$ZLIB" = "yes"; then
       AC_CHECK_FILE(../src/networks/gnutella,GNUTELLA=yes, [
         GNUTELLA=no
         BAD_TARGETS="$BAD_TARGETS gnutella"
       ])
    else
       GNUTELLA=no
       BAD_TARGETS="$BAD_TARGETS gnutella(no Zlib)"
    fi
  else
    GNUTELLA=no
    BAD_TARGETS="$BAD_TARGETS gnutella"
  fi

  if test "$BITTORRENT" = "yes"; then
    AC_CHECK_FILE(../src/networks/bittorrent,BITTORRENT=yes, [
      BITTORRENT=no
      BAD_TARGETS="$BAD_TARGETS bittorrent"
    ])
  else
    BAD_TARGETS="$BAD_TARGETS bittorrent"
  fi

  if test "$SOULSEEK" = "yes"; then
    if test "$ZLIB" = "yes"; then
       AC_CHECK_FILE(../src/networks/soulseek,SOULSEEK=yes, [
         SOULSEEK=no
         BAD_TARGETS="$BAD_TARGETS soulseek"
       ])
    else
       SOULSEEK=no
       BAD_TARGETS="$BAD_TARGETS soulseek(no Zlib)"
    fi
  else
    SOULSEEK=no
    BAD_TARGETS="$BAD_TARGETS soulseek"
  fi

  if test "$OPENFT" = "yes" ; then
    AC_CHECK_FILE(../src/networks/openFT,OPENFT=yes, [
      OPENFT=no
      BAD_TARGETS="$BAD_TARGETS openFT(obsolete)"
    ])
  else
    BAD_TARGETS="$BAD_TARGETS openFT(obsolete)"
  fi

  if test "$FASTTRACK" = "yes" ; then
    AC_CHECK_FILE(../src/networks/fasttrack,FASTTRACK=yes, [
      FASTTRACK=no
      BAD_TARGETS="$BAD_TARGETS FastTrack(devel)"
    ])
  else
    BAD_TARGETS="$BAD_TARGETS FastTrack(devel)"
  fi

  if test "$CYMES" = "yes" ; then
    AC_CHECK_FILE(../src/networks/cymes,CYMES=yes, [
      CYMES=no
      BAD_TARGETS="$BAD_TARGETS"
    ])
  else
    BAD_TARGETS="$BAD_TARGETS"
  fi

if test "$DONKEY" = "yes" ; then

  AC_CHECK_FILE(../src/networks/donkey,[
    DONKEY=yes
    AC_CHECK_FILE(../src/networks/server,DONKEY_SERVER=yes, [
      DONKEY_SERVER=no
      BAD_TARGETS="$BAD_TARGETS donkey_server"
    ])
  ], [
      DONKEY=no
      DONKEY_SERVER=no
      BAD_TARGETS="$BAD_TARGETS donkey_server donkey_client"
  ])

  else
      BAD_TARGETS="$BAD_TARGETS donkey_server donkey_client"
fi


# Check for GTK only if we want to build the GUI
if test "$BUILD_GUI" = "yes"; then
  AC_CHECK_PROG(GTK_CONFIG, gtk-config, gtk-config, no)
else
  GTK_CONFIG=no
fi

if test "$GTK_CONFIG" = "no"; then
     LABLGTK_CONFIG=no
else
  AC_MSG_CHECKING(Checking for native code lablgtk)
  if test -f `$OCAMLC -where`/lablgtk/lablgtk.$OCAMLLIB_EXT; then
     AC_MSG_RESULT(yes)
     LABLGTK_CONFIG=yes
  else
     AC_MSG_RESULT(no)
     LABLGTK_CONFIG=no
     if test -f `$OCAMLC -where`/lablgtk/lablgtk.cma; then
       echo "--------------------------------"
       echo "Lablgtk is not installed properly. See the INSTALL.txt"
       echo "file of mldonkey to see how to compile lablgtk. You"
       echo "probably forgot to call 'make opt' before 'make install'."
       echo "--------------------------------"
     else
       echo "Do you want this script to try to download and install lablgtk"
       echo "LOCALLY in mldonkey directory ?"
       if test "$BATCH" = "no"; then read i; else i=yes; fi
       case "$i" in
        y* | Y*) 

         cd $PATCH_DIR
         rm -rf lablgtk-"$REQUIRED_LABLGTK"
         if test ! -f lablgtk-"$REQUIRED_LABLGTK".tar.gz; then
           echo Downloading ...
           $WGET http://wwwfun.kurims.kyoto-u.ac.jp/soft/olabl/dist/lablgtk-"$REQUIRED_LABLGTK".tar.gz
         fi
         if test ! -f lablgtk-"$REQUIRED_LABLGTK".tar.gz; then exit 1; fi

         mkdir -p $BUILD_DIR
         cd $BUILD_DIR
         echo Uncompressing ...
         gzip -cd $PATCH_DIR/lablgtk-"$REQUIRED_LABLGTK".tar.gz | tar xf -
         (cd lablgtk-"$REQUIRED_LABLGTK"
          PATH=$OCAML_PATH:$PATH
          export PATH
          echo $PATH
          $GNU_MAKE configure
          $GNU_MAKE
          $GNU_MAKE opt  
          $GNU_MAKE install
          cd ..
          rm -rf lablgtk-"$REQUIRED_LABLGTK"
         )
         cd $CONFIG_DIR
         if test -f `$OCAMLC -where`/lablgtk/lablgtk.$OCAMLLIB_EXT; then
            LABLGTK_CONFIG=yes
         else
            echo "Installation of lablgtk failed"
            LABLGTK_CONFIG=no
         fi
         ;;
        *);;
      esac
     fi
  fi
fi

if test "$IM" = "yes" ; then
  AC_CHECK_FILE(../src/im,IM=yes, [
  IM=no
  ])
else
   IM=no
fi


if test "$IM" = "yes"; then
  CRYPTOKIT=no
  AC_MSG_CHECKING(Checking for CryptoKit)
  if test -f $OCAMLLIB/cryptokit.$OCAMLLIB_EXT; then
    CRYPTOKIT=yes
    AC_MSG_RESULT(yes)
  else
    AC_MSG_RESULT(no)
  fi

  if test "$CRYPTOKIT" = "yes"; then
    YAXPO=no
    AC_MSG_CHECKING(Checking for Yaxpo)
    if test -f $OCAMLLIB/yaxpo.$OCAMLLIB_EXT; then
      YAXPO=yes
      AC_MSG_RESULT(yes)
    else
      AC_MSG_RESULT(no)
    fi
  fi

  if test "$YAXPO" = "yes"; then
    JABBR=no
    AC_MSG_CHECKING(Checking for Jabbr)
    if test -f $OCAMLLIB/jabbr.$OCAMLLIB_EXT; then
      JABBR=yes
      AC_MSG_RESULT(yes)
    else
      AC_MSG_RESULT(no)
    fi
  fi
fi

if test "$PTHREAD_LIBS" = "no"; then
 PTHREAD_LIBS="" 
 echo "Dont use threads"
else
  ACX_PTHREAD
fi


AC_MSG_CHECKING(compile GTK GUI)
  if test "$LABLGTK_CONFIG" = "no"; then
        AC_MSG_RESULT(no)
        BAD_TARGETS="$BAD_TARGETS mldonkey_gui\$(EXE) mldonkey_gui2\$(EXE) mlchat\$(EXE)"
        COMPILE_GUI=no
        RELEASENAME="$RELEASENAME-nogui"
  else
        MORE_TARGETS="$MORE_TARGETS mldonkey_gui\$(EXE) mldonkey_gui2\$(EXE) mlchat\$(EXE)"
        GTK_LIBS=`$GTK_CONFIG --libs`
        GTK_CFLAGS=`$GTK_CONFIG --cflags`
        GTK_VERSION=`$GTK_CONFIG --version`
        COMPILE_GUI=yes
        AC_MSG_RESULT(yes)

        AC_MSG_CHECKING(GToolbox.popup_menu args)
        GTOOLBOX="`$OCAMLC -where`/lablgtk/gToolbox.mli"
        grep popup $GTOOLBOX | grep -i button 2> /dev/null && GTOOLBOX_ARGS=new
        if test "$GTOOLBOX_ARGS" = "new"; then
          GTOOLBOX_POPUPMENU=' ~button: button ~time: time '
          AC_MSG_RESULT(new)
        else
          GTOOLBOX_POPUPMENU=' ~x: button ~y: time '
          AC_MSG_RESULT(old)
        fi
  fi

case "`uname -s`" in
  *win32* | *WIN32*) CURRENT_DIR="";;
  *) CURRENT_DIR="./";;
esac

AC_CHECK_PROG(COMPRESS, bzip2, bzip2)
AC_CHECK_PROG(COMPRESS, gzip, gzip)

if test "$ac_cv_prog_COMPRESS" = "bzip2"; then
   COMPRESS_EXT=bz2
else 
   COMPRESS_EXT=gz
fi


MD4ARCH=$arch
case $host in
  i386-pc-linux*) MD4COMP=as; MD4ARCH=i386;;
  i486-pc-linux*) MD4COMP=as; MD4ARCH=i486;;
  i586-pc-linux*) MD4COMP=as; MD4ARCH=i586;;
  i686-pc-linux*) MD4COMP=as; MD4ARCH=i686;;
  *) MD4COMP=cc;;
esac

ARCH=$arch

case "$OCAMLVERSION" in
  3.06) TYPE_FORMAT="";;
  *) TYPE_FORMAT="type ('a,'b,'c) ml_format = ('a,'b, 'c,'c) format  type ('a,'b,'c) format = ('a,'b, 'c) ml_format";;
esac		    

AC_SUBST(TYPE_FORMAT)
AC_SUBST(OCAMLC)
AC_SUBST(OCAMLOPT)
AC_SUBST(OCAMLLEX)
AC_SUBST(OCAMLYACC)
AC_SUBST(OCAMLDEP)
AC_SUBST(CAMLP4)
AC_SUBST(PERL)
AC_SUBST(OCAMLMKTOP)

AC_SUBST(MORE_TARGETS)
AC_SUBST(MORE_SUBDIRS)
AC_SUBST(LABLGL_CMA)
AC_SUBST(LABLGL_CMXA)
AC_SUBST(CONFIG_INCLUDES)
AC_SUBST(CURRENT_DIR)
AC_SUBST(MD4ARCH)
AC_SUBST(MD4COMP)
AC_SUBST(ZLIB)
AC_SUBST(ICONV)

AC_SUBST(AUDIO_GALAXY)
AC_SUBST(OPEN_NAPSTER)
AC_SUBST(DIRECT_CONNECT)
AC_SUBST(GNUTELLA)
AC_SUBST(BITTORRENT)
AC_SUBST(SOULSEEK)
AC_SUBST(OPENFT)
AC_SUBST(FASTTRACK)
AC_SUBST(DONKEY)
AC_SUBST(OPEN_DONKEY)
AC_SUBST(DONKEY_SERVER)
AC_SUBST(CYMES)

AC_SUBST(DEVEL)
AC_SUBST(JABBR)

AC_SUBST(OCAMLOPT_DIL)
AC_SUBST(COMPILE_GUI)
AC_SUBST(REQUIRED_OCAML)
AC_SUBST(REQUIRED_LABLGTK)
AC_SUBST(ARCH)
AC_SUBST(PATCHED_OCAMLOPT)
AC_SUBST(COMPRESS)
AC_SUBST(COMPRESS_EXT)
AC_SUBST(RELEASENAME)
AC_SUBST(CHECKBOUNDS)
AC_SUBST(CURRENT_VERSION)
AC_SUBST(CURRENT_RELEASE)
AC_SUBST(GTOOLBOX_POPUPMENU)
AC_SUBST(OS_FILES)
AC_SUBST(CONFIG_ARGS)
AC_SUBST(CONFIG_ARGS_DEFINED)
AC_SUBST(TARGET_TYPE)
AC_SUBST(RPMBUILD)

AC_SUBST(HAS_ZLIB)
AC_SUBST(ZLIB__UNCOMPRESS_STRING2)
AC_SUBST(ZLIB__COMPRESS_STRING)

AUTOCONF=../src/utils/lib/autoconf.ml
GTK_AUTOCONF=../src/utils/lib/gAutoconf.ml
AC_OUTPUT(\
  Makefile.config \
  Makefile.config.i386 \
  Makefile.config.i486 \
  Makefile.config.i586 \
  Makefile.config.i686 \
  $AUTOCONF.new $GTK_AUTOCONF.new \
   ../packages/rpm/mldonkey.spec \
   ../packages/rpm/Makefile \
   ../packages/windows/mlnet.nsi)
diff $AUTOCONF.new $AUTOCONF 2> /dev/null > /dev/null || cp -f $AUTOCONF.new $AUTOCONF
diff $GTK_AUTOCONF.new $GTK_AUTOCONF 2> /dev/null > /dev/null || cp -f $GTK_AUTOCONF.new $GTK_AUTOCONF



cd ..
echo "Building dependencies"
$GNU_MAKE depend 2> /dev/null > /dev/null || echo "Building dependencies fails: try: 'make depend' or 'gmake depend'"


echo "The following modules will not be compiled: {" $BAD_TARGETS "}"
