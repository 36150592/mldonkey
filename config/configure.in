
AC_REVISION(norev)
AC_PREREQ(2.53)
AC_INIT(Makefile.config.in)
AC_CONFIG_HEADER(config.h)

MYCONFIG_ARGS=$*
echo Arguments: $MYCONFIG_ARGS

MYCONFIG_ARGS_DEFINED=yes
echo $MYCONFIG_ARGS

CURRENT_VERSION=2.5
CURRENT_RELEASE=30.14
if test -d .svn; then
  CURRENT_RELEASE=${CURRENT_RELEASE}_r`svnversion -n .`
fi
if test -f ./subrelease; then
  CURRENT_RELEASE=${CURRENT_RELEASE}`cat ./subrelease`
fi

REQUIRED_OCAML=3.08.3
DOWNLOAD_OCAML_MAJOR=3.08
DOWNLOAD_OCAML=3.08.3

REQUIRED_LABLGTK=1.2.7

touch install-sh

LABLGTK_NAME=lablgtk



AUDIO_GALAXY=no
OPEN_NAPSTER=no
GNUTELLA=yes
GNUTELLA2=yes
DIRECT_CONNECT=no
SOULSEEK=no
OPENFT=no
CYMES=no
DONKEY=yes
BITTORRENT=yes
FASTTRACK=yes
FILETP=yes
ARES=yes
BROOSNET=yes
MULTINET=yes
AC_ARG_ENABLE(multinet,      [  --disable-multinet      allows you to only compile support for edonkey + Overnet], [MULTINET="$enableval"])
if test ! "$MULTINET" = "yes"; then
  AUDIO_GALAXY=no
  OPEN_NAPSTER=no
  GNUTELLA=no
  GNUTELLA2=no
  DIRECT_CONNECT=no
  SOULSEEK=no
  OPENFT=no
  CYMES=no
  FASTTRACK=no
  FILETP=no
  BITTORRENT=no
  RELEASENAME="$RELEASENAME-nomultinet"
  ARES=no
  BROOSNET=no
fi
AC_ARG_ENABLE(donkey,        [  --disable-donkey        allows you to remove support for eDonkey], [DONKEY="$enableval"])
AC_ARG_ENABLE(bittorrent,    [  --disable-bittorrent    allows you to remove support for Bittorent], [BITTORRENT="$enableval"])
AC_ARG_ENABLE(filetp,        [  --disable-filetp        allows you to remove support for fileTP], [FILETP="$enableval"])
AC_ARG_ENABLE(gnutella, [  --disable-gnutella      allows you to remove support for Gnutella], [GNUTELLA="$enableval"])
AC_ARG_ENABLE(gnutella2, [  --disable-gnutella2     allows you to remove support for Gnutella2], [GNUTELLA2="$enableval"])
AC_ARG_ENABLE(soulseek, [  --disable-soulseek      allows you to remove support for SoulSeek], [SOULSEEK="$enableval"])
AC_ARG_ENABLE(fasttrack,     [  --disable-fasttrack     allows you to remove support for FastTrack], [FASTTRACK="$enableval"])
AC_ARG_ENABLE(opennap,       [  --disable-opennap       allows you to remove support for Open Napster], [OPEN_NAPSTER="$enableval"])
#AC_ARG_ENABLE(directconnect, [  --disable-directconnect  allows you to remove support for Direct Connect], [DIRECT_CONNECT="$enableval"])
#AC_ARG_ENABLE(audiogalaxy,   [  --disable-audiogalaxy   allows you to remove support for Audio Galaxy], [AUDIO_GALAXY="$enableval"])
AC_ARG_ENABLE(openft,        [  --disable-openft        allows you to remove support for OpenFT], [OPENFT="$enableval"])
AC_ARG_ENABLE(ares,     [  --disable-ares          allows you to remove support for Ares], [ARES="$enableval"])
AC_ARG_ENABLE(cymes,         [  --disable-cymes         allows you to remove support for Cymes], [CYMES="$enableval"])

BATCH=no
AC_ARG_ENABLE(batch, [  --enable-batch          reply YES to all queries in this script], [BATCH="$enableval"])

AC_ARG_ENABLE(ocamlver, [  --enable-ocamlver=VER   allows you to change the required version of ocaml to VER], [REQUIRED_OCAML="$enableval"])

FORCE_MINGW=no
AC_ARG_ENABLE(mingw, [  --enable-mingw          forces compilation with MINGW on Cygwin], [FORCE_MINGW="$enableval"])

AC_ARG_ENABLE(checks, [  --enable-checks         force mldonkey to perform bound checks on array/string access], [CHECKBOUNDS="$enableval"])
if test "$CHECKBOUNDS" = "yes"; then
  CHECKBOUNDS=true
else
  CHECKBOUNDS=false
fi

PROFILE=no
AC_ARG_ENABLE(profile, [  --enable-profile        allows you to profile mlnet using gprof], [PROFILE="$enableval"])

DEBUG=no
AC_ARG_ENABLE(debug, [  --enable-debug          allows you to compile mlnet with debug symbols], [DEBUG="$enableval"])

BUILD_GUI=yes
BUILD_NEWGUI=yes
AC_ARG_ENABLE(newgui, [  --disable-newgui        allows you to compile the old-gui], [BUILD_NEWGUI="$enableval"])
AC_ARG_ENABLE(gui,           [  --disable-gui           allows you to remove the GUI], [BUILD_GUI="$enableval"])
AC_ARG_ENABLE(gtk2, [  --enable-gtk2           allows you to compile using GTK2], [USE_GTK2="$enableval"])

PTHREAD_LIBS=yes
AC_ARG_ENABLE(pthread, [  --disable-pthread       allows you to disable pthread support in mldonkey], [PTHREAD_LIBS="$enableval"])
AC_ARG_ENABLE(pthread-lib, [  --enable-pthread-lib    legacy option], [PTHREAD_LIBS="$enableval"])

ICONV=yes
AC_ARG_ENABLE(iconv,       [  --disable-iconv         disable the use of iconv for compiling on broken windows environments], [ICONV="$enableval"])

GD=yes
AC_ARG_ENABLE(gd,       [  --disable-gd            disable the use of gd], [GD="$enableval"])

ifelse(AC_ACVERSION, [2.13], [],
[dnl Large file enabled
   AC_SYS_LARGEFILE

])

AC_ARG_ENABLE(devel, [  --enable-devel          (undocumented)], [DEVEL="$enableval"])

IM=yes

SWARMING1=no
AC_ARG_ENABLE(swarming1, [  --enable-swarming1      depricated (don't use it)], [SWARMING1="$enableval"])



AC_CANONICAL_HOST
AC_CHECK_PROG(CC,gcc3,"gcc3",cc)
AC_PROG_CC
AC_EXEEXT
AC_PROG_CPP
if test "$FORCE_MINGW" = "yes"; then
    CC="$CC -mno-cygwin"
fi
AC_PROG_RANLIB

OCAML_PATH=

AC_CHECK_PROG(GNU_MAKE, gmake, gmake)
AC_CHECK_PROG(GNU_MAKE, make, make)

cd ..
SOURCE_DIR=`pwd`
cd config

CONFIG_DIR=$SOURCE_DIR/config
PATCH_DIR=$SOURCE_DIR/patches
LOCAL_DIR=$PATCH_DIR/local
BUILD_DIR=$PATCH_DIR/build

AC_ARG_ENABLE(local-prefix, [  --enable-local-prefix=DIR  allows you to specify where you want temporary tools to be installed (DIR must be absolute)], [LOCAL_DIR="$enableval"])

LOCAL=$LOCAL_DIR
LOCAL_OCAML=$LOCAL_DIR/bin

AC_PATH_PROG(OCAMLC,ocamlc.opt,"",[$LOCAL_DIR/bin:$PATH])
AC_CHECK_PROG(OCAMLC,ocamlc,ocamlrun ocamlc)



echo $host

case "$host" in
  alpha*-*-osf*)                arch=alpha; system=digital;;
  alpha*-*-linux*)              arch=alpha; system=linux;;
  alpha*-*-freebsd*)            arch=alpha; system=freebsd;;
  alpha*-*-netbsd*)             arch=alpha; system=netbsd;;
  alpha*-*-openbsd*)            arch=alpha; system=openbsd;;
  sparc-*-sunos4.*)             arch=sparc; system=sunos;;
  sparc-*-solaris2.*)           arch=sparc; system=solaris;;
  sparc-*-*bsd*)                arch=sparc; system=bsd;;
  sparc-*-linux*)               arch=sparc; system=linux;;
  i?86-*-linux*)           arch=i386; system=linux;;
  i386-*-*bsd*)            arch=i386; system=bsd;;
  i486-*-*bsd*)            arch=i486; system=bsd;;
  i586-*-*bsd*)            arch=i586; system=bsd;;
  i686-*-*bsd*)            arch=i686; system=bsd;;
  i?86-*-nextstep*)        arch=i386; system=nextstep;;
  i?86-*-solaris*)         arch=i386; system=solaris;;
  i?86-*-beos*)            arch=i386; system=beos;;
  i?86-*-cygwin*)          arch=i386; system=cygwin;;
  mips-*-irix6*)                arch=mips; system=irix;;
  hppa1.1-*-hpux*)              arch=hppa; system=hpux;;
  hppa1.1-*-nextstep*)          arch=hppa; system=nextstep;;
  rs6000-*-aix*)                arch=power; model=rs6000; system=aix;;
  powerpc-*-aix*)               arch=power; model=ppc; system=aix;;
  powerpc-*-linux*)             arch=power; model=ppc; system=elf;;
  powerpc-*-rhapsody*)          arch=power; model=ppc; system=rhapsody;;
  powerpc-*-darwin*)            arch=power; model=ppc; system=rhapsody;;
  arm*-*-linux*)                arch=arm; system=linux;;
  ia64-*-linux*)                arch=ia64; system=linux;;
esac


BUILD_OCAML=no
if test -z "$ac_cv_prog_OCAMLC"; then 
   BUILD_OCAML=yes
else
  echo "Testing ocaml version"
  OCAMLVERSION=`$OCAMLC -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
  case "$OCAMLVERSION" in
    "$REQUIRED_OCAML"*) ;;
    3.08.2*)
        if test "$system" = "rhapsody"; then
            case "$OCAMLVERSION" in
                3.08.2+4* | 3.08.2+5* | 3.08.2+6* | 3.08.2+7* | 3.08.2+8*) ;;
                *)
                    echo "Need build"
                    BUILD_OCAML=yes
                    ;;
            esac
        fi
        ;;
    *)
        echo "Need build"
        BUILD_OCAML=yes
        ;;
  esac
fi

if test "$BUILD_OCAML" = "yes"; then

  AC_CHECK_FILE("$LOCAL_OCAML"/ocamlc.opt, [
    OCAMLVERSION=`$LOCAL_OCAML/ocamlc.opt -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
    REBUILD_OCAML=no
  case "$OCAMLVERSION" in
    "$REQUIRED_OCAML"*) ;;
    3.08.2*)
        if test "$system" = "rhapsody"; then
            case "$OCAMLVERSION" in
                3.08.2+4* | 3.08.2+5* | 3.08.2+6* | 3.08.2+7* | 3.08.2+8*) ;;
                *)
                    REBUILD_OCAML=yes
                    ;;
            esac
        fi
        ;;
    *)
        REBUILD_OCAML=yes
        ;;
  esac
    if test "$REBUILD_OCAML" = "no"; then
        echo "Need rebuild"
        BUILD_OCAML=no
        OCAMLC=$LOCAL_OCAML/ocamlc.opt
        ac_cv_prog_OCAMLC=$LOCAL_OCAML/ocamlc.opt
    fi
  ])
fi

AC_CHECK_PROG(RPMBUILD,rpmbuild,rpmbuild)
AC_CHECK_PROG(RPMBUILD,rpm,rpm)
AC_CHECK_PROG(WGET, wget, wget)
if test -z "$ac_cv_prog_WGET"; then 
  $CC -o wget wget.c || echo "Cannot compile wget.c"
  AC_PATH_PROG(WGET, wget,,$SOURCE_DIR/config)  
  ac_cv_prog_WGET="$ac_cv_path_WGET"
fi
WGET="$ac_cv_prog_WGET"

if test "$BUILD_OCAML" = "yes"; then

  echo "********  Objective-Caml $REQUIRED_OCAML is required  *********" 1>&2; 
  if test "$WGET" = ""; then
    echo "********          wget is missing          *********" 1>&2;
    echo "********       cannot download Ocaml       *********" 1>&2;
    exit 1
  fi
  echo "*******  Check http://caml.inria.fr/  ********" 1>&2; 
  echo "Do you want this script to try to download and install ocaml"
  echo "LOCALLY in mldonkey directory ?"
  if test "$BATCH" = "no"; then read i; else i=yes; fi
  case "$i" in
   y* | Y*) 
      cd $PATCH_DIR
      if test ! -f ocaml-"$DOWNLOAD_OCAML".tar.gz; then
        echo Downloading ...

        $WGET http://pauillac.inria.fr/caml/distrib/ocaml-"$DOWNLOAD_OCAML_MAJOR"/ocaml-"$DOWNLOAD_OCAML".tar.gz
        # $WGET http://savannah.nongnu.org/download/mldonkey/tools/ocaml-"$REQUIRED_OCAML".tar.gz
        # $WGET http://pauillac.inria.fr/~lefessan/mldonkey/ocaml-"$REQUIRED_OCAML".tar.gz
      fi
      if test ! -f ocaml-"$DOWNLOAD_OCAML".tar.gz; then exit 1; fi

      echo Uncompressing ...
      mkdir -p $BUILD_DIR
      cd $BUILD_DIR
      rm -rf ocaml-"$REQUIRED_OCAML"
      gzip -cd $PATCH_DIR/ocaml-"$DOWNLOAD_OCAML".tar.gz | tar vxf -
      cd ocaml-"$DOWNLOAD_OCAML"
      if test -f $PATCH_DIR/ocaml-"$REQUIRED_OCAML".patch; then
        echo Patching ...
        patch -p1 < $PATCH_DIR/ocaml-"$REQUIRED_OCAML".patch
      fi
      echo Configuring ...
      ./configure -prefix $LOCAL_DIR
      cd config
      cp -f Makefile Makefile.old
      sed "s/OTHERLIBRARIES=.*/OTHERLIBRARIES=unix dynlink num str bigarray threads/" Makefile.old > Makefile
      cd ..
      cp -f $PATCH_DIR/Makefile.ocamldoc ocamldoc/Makefile
      echo Compiling ...
      $GNU_MAKE world opt opt.opt
      echo Installing ...
      $GNU_MAKE install
      if ! test -f $LOCAL_DIR/lib/ocaml/threads; then
        if ! test -f $LOCAL_DIR/lib/ocaml/vmthreads; then
          ln -s vmthreads  $LOCAL_DIR/lib/ocaml/threads
        fi
      fi
      cd $BUILD_DIR
      rm -rf ocaml-"$REQUIRED_OCAML"
      cd $CONFIG_DIR
      echo Ocaml locally installed for mldonkey

      if test -f "$LOCAL_OCAML"/ocamlc.opt; then
         OCAMLC=$LOCAL_OCAML/ocamlc.opt
         ac_cv_prog_OCAMLC=$LOCAL_OCAML/ocamlc.opt
      else
      if test -f "$LOCAL_OCAML"/ocamlc; then
         OCAMLC=$LOCAL_OCAML/ocamlc
         ac_cv_prog_OCAMLC=$LOCAL_OCAML/ocamlc
      else
        echo "Ocaml installation failed"; exit 1
      fi
      fi
      ;;
   *)  exit 1;;
  esac
fi

if test "$OCAMLC" = "$LOCAL_OCAML"/ocamlc.opt ; then
  OCAML_PATH="$LOCAL_OCAML"/
  OCAMLOPT=$LOCAL_OCAML/ocamlopt.opt
  OCAMLMKTOP=$LOCAL_OCAML/ocamlmktop
  OCAMLDEP=$LOCAL_OCAML/ocamldep
  OCAMLLEX=$LOCAL_OCAML/ocamllex.opt
  OCAMLYACC=$LOCAL_OCAML/ocamlyacc
  CAMLP4=$LOCAL_OCAML/camlp4
else
  if test "$OCAMLC" = "$LOCAL_OCAML"/ocamlc ; then
  OCAML_PATH="$LOCAL_OCAML"/
  if test -f "$LOCAL_OCAML/ocamlopt"; then
    OCAMLOPT=$LOCAL_OCAML/ocamlopt
  else
    OCAMLOPT=no
  fi
  OCAMLMKTOP=$LOCAL_OCAML/ocamlmktop
  OCAMLDEP=$LOCAL_OCAML/ocamldep
  OCAMLLEX=$LOCAL_OCAML/ocamllex
  OCAMLYACC=$LOCAL_OCAML/ocamlyacc
  CAMLP4=$LOCAL_OCAML/camlp4
  else
  AC_CHECK_PROG(OCAMLOPT, ocamlopt.opt, ocamlopt.opt)
  AC_CHECK_PROG(OCAMLOPT, ocamlopt, ocamlopt, no)
  AC_CHECK_PROG(OCAMLDEP, ocamldep, ocamldep)
  AC_CHECK_PROG(OCAMLLEX, ocamllex.opt, ocamllex.opt)
  AC_CHECK_PROG(OCAMLLEX, ocamllex, ocamllex)
  AC_CHECK_PROG(OCAMLYACC, ocamlyacc, ocamlyacc)
  AC_CHECK_PROG(OCAMLMKTOP, ocamlmktop, ocamlmktop)
  AC_CHECK_PROG(CAMLP4, camlp4, camlp4)
fi
fi



AC_PATH_PROG(PERL, perl, perl)

OCAMLVERSION=`$OCAMLC -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
echo "ocamlc version is $OCAMLVERSION"
    REBUILD_OCAML=no
  case "$OCAMLVERSION" in
    "$REQUIRED_OCAML"*) ;;
    3.08.2*)
        if test "$system" = "rhapsody"; then
            case "$OCAMLVERSION" in
                3.08.2+4* | 3.08.2+5* | 3.08.2+6* | 3.08.2+7* | 3.08.2+8*) ;;
                *)
                    REBUILD_OCAML=yes
                    ;;
            esac
        fi
        ;;
    *)
        REBUILD_OCAML=yes
        ;;
  esac
    if test "$REBUILD_OCAML" = "yes"; then
      echo "********  Version $REQUIRED_OCAML of Objective-Caml is required  *********" 1>&2; 
      echo "*******  Check http://caml.inria.fr/  ********" 1>&2; 
      exit 1;
    fi


if test "$OCAMLOPT" = "no"; then
  TARGET_TYPE=byte
  OCAMLLIB_EXT=cma
else
  TARGET_TYPE=opt
  OCAMLLIB_EXT=cmxa

  OCAMLOPTVERSION=`$OCAMLOPT -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
  echo "ocamlopt version is $OCAMLOPTVERSION"

  test "$OCAMLOPTVERSION" = "$OCAMLVERSION" || {
    echo "********  Version $REQUIRED_OCAML of ocamlopt is required  *********" 1>&2; 
    echo "*******  Check http://caml.inria.fr/  ********" 1>&2; 
    exit 1; } 

fi

if test "$PROFILE" = "yes"; then
   OCAMLOPT="$OCAMLOPT -p"
fi
if test "$FORCE_MINGW" = "yes"; then
    OCAMLC="$OCAMLC -ccopt -mno-cygwin"
    OCAMLOPT="$OCAMLOPT -ccopt -mno-cygwin"
    OCAMLMKTOP="$OCAMLMKTOP -ccopt -mno-cygwin"
fi
if test "$DEBUG" = "yes"; then
    OCAMLC="$OCAMLC -g"
fi

# Sizes of various common basic types
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(void *)
AC_CHECK_SIZEOF(char)
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(float)
AC_CHECK_SIZEOF(double)

# various header files
AC_CHECK_HEADERS(arpa/inet.h,,)
AC_CHECK_HEADERS([sys/types.h netinet/in_systm.h netinet/in.h netinet/ip.h],,,
[#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#ifdef HAVE_NETINET_IN_SYSTM_H
#include <netinet/in_systm.h>
#endif
#ifdef HAVE_NETINET_IN_H
#include <netinet/in.h>
#endif
])

# poll if possible
AC_CHECK_HEADERS(sys/poll.h,,)
AC_CHECK_FUNCS(poll,,)

ZLIB=no
AC_CHECK_LIB(z,inflate,[ZLIB=yes])
AC_CHECK_HEADERS(zlib.h,,[ZLIB=no])

if test "$ZLIB" = "yes"; then
  HAS_ZLIB=true
  ZLIB__UNCOMPRESS_STRING2="Zlib.uncompress_string2 s"
  ZLIB__COMPRESS_STRING="Zlib.compress_string s"
  ZLIB__GZIP_STRING="Zlib.gzip_string s"
else
  echo "Zlib missing, did you install zlib and zlib-developer packages?"; exit 1
fi

SHA1_VERSION=sha1new
AC_CHECK_HEADERS(endian.h sys/endian.h machine/endian.h,[SHA1_VERSION=sha1new; break],[SHA1_VERSION=sha1old])
if test "$SHA1_VERSION" = "sha1old"; then
    echo "You don't have endian.h or sys/endian.h or machine/endian.h installed."
    echo "This script will fallback on the old slower sha1 implementation."
else
    AC_DEFINE(ENABLE_SHA1NEW, 1, [Define to 1 if you want to use the faster sha1new implementation.])
fi

if test "$ICONV" = "yes"; then
  AM_ICONV
  if test "$am_cv_func_iconv" != "yes"; then
    echo "iconv() is missing, did you install the libraries and the developer packages for libiconv?"
    exit 1
  fi
  LIBS="$LIBS $LIBICONV"
  AC_CHECK_FUNCS([locale_charset])
  AC_CHECK_HEADERS([libcharset.h])
  AC_CHECK_HEADERS([locale.h])
  AC_CHECK_LIB(charset,locale_charset)
else
  AC_DEFINE(DISABLE_ICONV, 1, [Define to 1 if you want to replace iconv and related with stubs.])
fi


# On linux plaforms, we will have to check that includes from kernel are
# available. glibc version test was shamelessly taken from
# http://public.activestate.com/gsar/APC/perl-5.8.x/Configure
OS_FILES=unix
OS_FILES2=unix
BUILD_SYSTEM3=""
case $host in
        *linux*)   
           AC_CHECK_HEADERS(linux/limits.h,, [
             OLD_CPPFLAGS=$CPPFLAGS
             CPPFLAGS="-I /usr/src/linux/include"
             AC_CHECK_HEADER(linux/types.h,[CONFIG_INCLUDES="-I /usr/src/linux/include"])
             CPPFLAGS=$OLD_CPPFLAGS]
           )
           AC_MSG_CHECKING(Checking for GNU C Library version...) 

cat >try.c <<'EOCP'
/* Find out version of GNU C library.  __GLIBC__ and __GLIBC_MINOR__
   alone are insufficient to distinguish different versions, such as
   2.0.6 and 2.0.7.  The function gnu_get_libc_version() appeared in
   libc version 2.1.0.      A. Dougherty,  June 3, 2002.
*/
#include <stdio.h>
int main(void)
{
#ifdef __GLIBC__
#   ifdef __GLIBC_MINOR__
#       if __GLIBC__ >= 2 && __GLIBC_MINOR__ >= 1
#           include <gnu/libc-version.h>
    printf("%s\n",  gnu_get_libc_version());
#       else
    printf("%d.%d\n",  __GLIBC__, __GLIBC_MINOR__);
#       endif
#   else
printf("%d\n",  __GLIBC__);
#   endif
    return 0;
#else
    return 1;
#endif
}
EOCP

           $CC -o try ./try.c
           BUILD_SYSTEM3="`./try`"
           echo $BUILD_SYSTEM3
           rm -f try try.*
        ;;
        *mingw*)
           OS_FILES=mingw
           OS_FILES2=mingw
        ;;
        *cygwin*) OS_FILES2=cygwin;;
        *)         ;;
esac

if test "$FORCE_MINGW" = "yes"; then
    OS_FILES=mingw
fi

AC_MSG_CHECKING(Additionnal includes) 
AC_MSG_RESULT($CONFIG_INCLUDES)

OCAMLLIB=`$OCAMLC -where`

if test -f $OCAMLLIB/lablgl.cma; then
  LABLGL_CMA=lablgl.cma
fi

if test -f $OCAMLLIB/lablgl.$OCAMLLIB_EXT; then
  LABLGL_CMXA=lablgl.$OCAMLLIB_EXT
fi

  if test "$DONKEY" = "yes"; then
    if test "$ZLIB" = "yes"; then
       AC_CHECK_FILE(../src/networks/donkey,DONKEY=yes, [
         DONKEY=no
         BAD_TARGETS="$BAD_TARGETS donkey"
       ])
    else
       DONKEY=no
       BAD_TARGETS="$BAD_TARGETS donkey(no Zlib)"
    fi
  else
    DONKEY=no
    BAD_TARGETS="$BAD_TARGETS donkey"
  fi

#  if test "$AUDIO_GALAXY" = "yes" ; then
#    AC_CHECK_FILE(../src/networks/audio_galaxy,AUDIO_GALAXY=yes, [
      AUDIO_GALAXY=no
      BAD_TARGETS="$BAD_TARGETS audio_galaxy(obsolete)"
#    ])
#  else
#    BAD_TARGETS="$BAD_TARGETS audio_galaxy(obsolete)"
#  fi

  if test "$OPEN_NAPSTER" = "yes" ; then
    AC_CHECK_FILE(../src/networks/opennap,OPEN_NAPSTER=yes, [
      OPEN_NAPSTER=no
      BAD_TARGETS="$BAD_TARGETS open_napster"
    ])
  else
    BAD_TARGETS="$BAD_TARGETS open_napster"
  fi

#  if test "$DIRECT_CONNECT" = "yes" ; then
#    AC_CHECK_FILE(../src/networks/direct_connect,DIRECT_CONNECT=yes, [
      DIRECT_CONNECT=no
      BAD_TARGETS="$BAD_TARGETS direct_connect(not working)"
#    ])
#  else
#    BAD_TARGETS="$BAD_TARGETS direct_connect"
#  fi

  if test "$GNUTELLA" = "yes"; then
    if test "$ZLIB" = "yes"; then
       AC_CHECK_FILE(../src/networks/gnutella,GNUTELLA=yes, [
         GNUTELLA=no
         BAD_TARGETS="$BAD_TARGETS gnutella"
       ])
    else
       GNUTELLA=no
       BAD_TARGETS="$BAD_TARGETS gnutella(no Zlib)"
    fi
  else
    GNUTELLA=no
    BAD_TARGETS="$BAD_TARGETS gnutella"
  fi

  if test "$GNUTELLA2" = "yes"; then
    if test "$ZLIB" = "yes"; then
       AC_CHECK_FILE(../src/networks/gnutella2,GNUTELLA2=yes, [
         GNUTELLA2=no
         BAD_TARGETS="$BAD_TARGETS gnutella2"
       ])
    else
       GNUTELLA2=no
       BAD_TARGETS="$BAD_TARGETS gnutella2(no Zlib)"
    fi
  else
    GNUTELLA2=no
    BAD_TARGETS="$BAD_TARGETS gnutella2"
  fi

  if test "$BITTORRENT" = "yes"; then
    AC_CHECK_FILE(../src/networks/bittorrent,BITTORRENT=yes, [
      BITTORRENT=no
      BAD_TARGETS="$BAD_TARGETS bittorrent"
    ])
  else
    BAD_TARGETS="$BAD_TARGETS bittorrent"
  fi

  if test "$FILETP" = "yes"; then
    AC_CHECK_FILE(../src/networks/fileTP,FILETP=yes, [
      FILETP=no
      BAD_TARGETS="$BAD_TARGETS fileTP"
    ])
  else
    BAD_TARGETS="$BAD_TARGETS fileTP"
  fi

  if test "$SOULSEEK" = "yes"; then
    if test "$ZLIB" = "yes"; then
       AC_CHECK_FILE(../src/networks/soulseek,SOULSEEK=yes, [
         SOULSEEK=no
         BAD_TARGETS="$BAD_TARGETS soulseek"
       ])
    else
       SOULSEEK=no
       BAD_TARGETS="$BAD_TARGETS soulseek(no Zlib)"
    fi
  else
    SOULSEEK=no
    BAD_TARGETS="$BAD_TARGETS soulseek"
  fi

  if test "$OPENFT" = "yes" ; then
    AC_CHECK_FILE(../src/networks/openFT,OPENFT=yes, [
      OPENFT=no
      BAD_TARGETS="$BAD_TARGETS openFT(obsolete)"
    ])
  else
    BAD_TARGETS="$BAD_TARGETS openFT(obsolete)"
  fi

  if test "$FASTTRACK" = "yes" ; then
    AC_CHECK_FILE(../src/networks/fasttrack,FASTTRACK=yes, [
      FASTTRACK=no
      BAD_TARGETS="$BAD_TARGETS FastTrack(devel)"
    ])
  else
    BAD_TARGETS="$BAD_TARGETS FastTrack(devel)"
  fi

  if test "$ARES" = "yes" ; then
    AC_CHECK_FILE(../src/networks/ares,ARES=yes, [
      ARES=no
      BAD_TARGETS="$BAD_TARGETS Ares(devel)"
    ])
  else
    BAD_TARGETS="$BAD_TARGETS Ares(devel)"
  fi

  if test "$BROOSNET" = "yes" ; then
    AC_CHECK_FILE(../src/networks/bittorrent/bTBroosnet.ml,ARES=yes, [
      BROOSNET=no
    ])
  fi

  if test "$CYMES" = "yes" ; then
    AC_CHECK_FILE(../src/networks/cymes,CYMES=yes, [
      CYMES=no
      BAD_TARGETS="$BAD_TARGETS"
    ])
  else
    BAD_TARGETS="$BAD_TARGETS"
  fi

if test "$DONKEY" = "yes" ; then

  AC_CHECK_FILE(../src/networks/donkey,[
    DONKEY=yes
    AC_CHECK_FILE(../src/networks/server,DONKEY_SERVER=yes, [
      DONKEY_SERVER=no
      BAD_TARGETS="$BAD_TARGETS donkey_server"
    ])
  ], [
      DONKEY=no
      DONKEY_SERVER=no
      BAD_TARGETS="$BAD_TARGETS donkey_server donkey_client"
  ])

  else
      BAD_TARGETS="$BAD_TARGETS donkey_server donkey_client"
fi


# Check for GTK only if we want to build the GUI
if test "$BUILD_GUI" = "yes"; then
  echo "---------------------------------------------------------"
  echo "Checking the libraries required to build the GTK GUI."
  echo "---------------------------------------------------------"
  if test "$USE_GTK2" = "yes"; then
    AC_MSG_CHECKING(for Zlib)
    if test "$ZLIB" = "yes"; then
      AC_MSG_RESULT(yes)
      REQUIRED_GTK=2.4.0
      PKG_GTK=gtk+-2.0
      AC_MSG_CHECKING(for GTK+ - version >= $REQUIRED_GTK)
      if pkg-config --atleast-version $REQUIRED_GTK $PKG_GTK; then
        AC_MSG_RESULT(yes)
        REQUIRED_RSVG=2.4.0
        PKG_RSVG=librsvg-2.0
        AC_MSG_CHECKING(for librsvg - version >= $REQUIRED_RSVG)
        if pkg-config --atleast-version $REQUIRED_RSVG $PKG_RSVG; then
          GTK_CONFIG="pkg-config $PKG_GTK $PKG_RSVG"
          BUILD_NEWGUI=no
          REQUIRED_LABLGTK=2.4.0
          LABLGTK_NAME=lablgtk2
          AC_MSG_RESULT(yes)
        else
          GTK_CONFIG=no
          AC_MSG_RESULT(no)
        fi
      else
        GTK_CONFIG=no
        AC_MSG_RESULT(no)
      fi
    else
      GTK_CONFIG=no
      AC_MSG_RESULT(no)
    fi
  else
    if test "$OS_FILES2" = "mingw"; then
      REQUIRED_GTK=1.3.0
      PKG_GTK=gtk+-1.3-win32-production
      AC_MSG_CHECKING(for GTK+ - version >= $REQUIRED_GTK)
      if pkg-config --atleast-version $REQUIRED_GTK $PKG_GTK; then
        GTK_CONFIG="pkg-config $PKG_GTK"
        AC_MSG_RESULT(yes)
      else
        GTK_CONFIG=no
        AC_MSG_RESULT(no)
      fi
    else
      AC_CHECK_PROG(GTK_CONFIG, gtk-config, gtk-config, no)
      if test "$GTK_CONFIG" = "no"; then
        AC_MSG_RESULT(no)
      else
        AC_MSG_RESULT(yes)
      fi
    fi
  fi
else
  GTK_CONFIG=no
fi
if test "$GTK_CONFIG" = "no"; then
     LABLGTK_CONFIG=no
else
  AC_MSG_CHECKING(for native code $LABLGTK_NAME)
  if test -f `$OCAMLC -where`/$LABLGTK_NAME/lablgtk.$OCAMLLIB_EXT; then
     if test "$USE_GTK2" = "yes"; then
       if test -f `$OCAMLC -where`/$LABLGTK_NAME/lablrsvg.$OCAMLLIB_EXT; then
         AC_MSG_RESULT(yes)
         LABLGTK_CONFIG=yes
       else
         AC_MSG_RESULT(no)
         LABLGTK_CONFIG=no
         if test -f `$OCAMLC -where`/$LABLGTK_NAME/lablrsvg.cma; then
           echo "---------------------------------------------------------"
           echo "lablrsvg is not installed properly. See the INSTALL.txt"
           echo "file of mldonkey to see how to compile $LABLGTK_NAME. You"
           echo "probably forgot to call 'make opt' before 'make install'."
           echo "---------------------------------------------------------"
         else
           echo "---------------------------------------------------------"
           echo "lablrsvg is not installed. See the INSTALL.txt file of"
           echo "mldonkey to see how to compile $LABLGTK_NAME. Librsvg"
           echo "may not be installed when you compiled $LABLGTK_NAME."
           echo "---------------------------------------------------------"
         fi
       fi
     else
       AC_MSG_RESULT(yes)
       LABLGTK_CONFIG=yes
     fi
  else
     AC_MSG_RESULT(no)
     LABLGTK_CONFIG=no
     if test -f `$OCAMLC -where`/$LABLGTK_NAME/lablgtk.cma; then
       echo "-------------------------------------------------------------"
       echo "$LABLGTK_NAME is not installed properly. See the INSTALL.txt"
       echo "file of mldonkey to see how to compile $LABLGTK_NAME. You"
       echo "probably forgot to call 'make opt' before 'make install'."
       echo "-------------------------------------------------------------"
     else
       echo "Do you want this script to try to download and install $LABLGTK_NAME"
       echo "LOCALLY in mldonkey directory ?"
       if test "$BATCH" = "no"; then read i; else i=yes; fi
       case "$i" in
        y* | Y*) 

         cd $PATCH_DIR
         rm -rf lablgtk-"$REQUIRED_LABLGTK"
         if test ! -f lablgtk-"$REQUIRED_LABLGTK".tar.gz; then
           echo Downloading ...
           $WGET http://wwwfun.kurims.kyoto-u.ac.jp/soft/olabl/dist/lablgtk-"$REQUIRED_LABLGTK".tar.gz
         fi
         if test ! -f lablgtk-"$REQUIRED_LABLGTK".tar.gz; then exit 1; fi

         mkdir -p $BUILD_DIR
         cd $BUILD_DIR
        echo Uncompressing ...
         gzip -cd $PATCH_DIR/lablgtk-"$REQUIRED_LABLGTK".tar.gz | tar xf -
         (cd lablgtk-"$REQUIRED_LABLGTK"
          PATH=$OCAML_PATH:$PATH
          export PATH
          echo $PATH

          if test "$USE_GTK2" = "yes"; then
            $GNU_MAKE configure --with-rsvg
            $GNU_MAKE world
            $GNU_MAKE install
          else
            $GNU_MAKE configure
            $GNU_MAKE
            $GNU_MAKE opt  
            $GNU_MAKE install
          fi

          cd ..
          rm -rf lablgtk-"$REQUIRED_LABLGTK"
         )
         cd $CONFIG_DIR
         if test -f `$OCAMLC -where`/$LABLGTK_NAME/lablgtk.$OCAMLLIB_EXT; then
            LABLGTK_CONFIG=yes
         else
            echo "Installation of $LABLGTK_NAME failed"
            LABLGTK_CONFIG=no
         fi
         ;;
        *);;
      esac
     fi
  fi
fi

if test "$USE_GTK2" = "yes" ; then
  GTK=gtk2
  GUIS="mldonkey_gui\$(EXE)"
  case "`uname -s`" in
    *win32* | *WIN32* | MINGW* )
      GTKCFLAGS="`pkg-config --cflags-only-I gtk+-2.0`"
      GTKLLIBS="`pkg-config --libs-only-L gtk+-2.0`"
      GTKLFLAGS="`pkg-config --libs-only-l gtk+-2.0`"
      ;;
    *)
      ;;
  esac
else
  GTK=gtk
  GUIS="mldonkey_gui\$(EXE) mldonkey_gui2\$(EXE) mlchat\$(EXE)"
fi

if test "$IM" = "yes" ; then
  AC_CHECK_FILE(../src/im,IM=yes, [
  IM=no
  ])
else
   IM=no
fi


if test "$IM" = "yes"; then
  CRYPTOKIT=no
  AC_MSG_CHECKING(Checking for CryptoKit)
  if test -f $OCAMLLIB/cryptokit.$OCAMLLIB_EXT; then
    CRYPTOKIT=yes
    AC_MSG_RESULT(yes)
  else
    AC_MSG_RESULT(no)
  fi

  if test "$CRYPTOKIT" = "yes"; then
    YAXPO=no
    AC_MSG_CHECKING(Checking for Yaxpo)
    if test -f $OCAMLLIB/yaxpo.$OCAMLLIB_EXT; then
      YAXPO=yes
      AC_MSG_RESULT(yes)
    else
      AC_MSG_RESULT(no)
    fi
  fi

  if test "$YAXPO" = "yes"; then
    JABBR=no
    AC_MSG_CHECKING(Checking for Jabbr)
    if test -f $OCAMLLIB/jabbr.$OCAMLLIB_EXT; then
      JABBR=yes
      AC_MSG_RESULT(yes)
    else
      AC_MSG_RESULT(no)
    fi
  fi
fi

if test "$PTHREAD_LIBS" = "no"; then
 PTHREAD_LIBS="" 
 echo "Dont use threads"
else
  ACX_PTHREAD
fi


AC_MSG_CHECKING(compile GTK GUI)
  if test "$LABLGTK_CONFIG" = "no"; then
        AC_MSG_RESULT(no)
        BAD_TARGETS="$BAD_TARGETS $GUIS"
        COMPILE_GUI=no
        RELEASENAME="$RELEASENAME-nogui"
  else
        MORE_TARGETS="$MORE_TARGETS $GUIS"
        COMPILE_GUI=yes
        AC_MSG_RESULT(yes)
        if test "$BUILD_NEWGUI" = "yes"; then
        echo "compiling newgui"
        else
        if test "$USE_GTK2" = "yes"; then
        echo "compiling gtk2 gui"
        else
        echo "compiling oldgui"
        fi
        fi
        AC_MSG_CHECKING(GToolbox.popup_menu args)
        if test "$OS_FILES" = "mingw"; then
	   GTOOLBOX="`$OCAMLC -where`\labl$GTK\gToolbox.mli"
	else
        GTOOLBOX="`$OCAMLC -where`/labl$GTK/gToolbox.mli"
	fi
        grep popup $GTOOLBOX | grep -i button 2> /dev/null && GTOOLBOX_ARGS=new
        if test "$GTOOLBOX_ARGS" = "new"; then
          GTOOLBOX_POPUPMENU=' ~button: button ~time: time '
          AC_MSG_RESULT(new)
        else
          GTOOLBOX_POPUPMENU=' ~x: button ~y: time '
          AC_MSG_RESULT(old)
        fi
	echo "---------------------------------------------------------"
	echo "End of GTK GUI configuration."
	echo "---------------------------------------------------------"
  fi

CURRENT_DIR="./"
case "`uname -s`" in
  *win32* | *WIN32* | MINGW* | CYGWIN* ) 
     CURRENT_DIR=""
     SYSTEM="windows"
     ;;
  *Linux*)
     SYSTEM="linux"
     ;;
  *FreeBSD*)
     SYSTEM="freebsd"
     ;;
  *OpenBSD*)
     SYSTEM="openbsd"
     ;;
  *SunOS*)
     SYSTEM="solaris"
     ;;
  *Darwin*)
     SYSTEM="darwin"
     ;;
  *)
     SYSTEM=""
     ;;
esac

AC_CHECK_PROG(COMPRESS, bzip2, bzip2)
AC_CHECK_PROG(COMPRESS, gzip, gzip)

if test "$ac_cv_prog_COMPRESS" = "bzip2"; then
   COMPRESS_EXT=bz2
else 
   COMPRESS_EXT=gz
fi

# testing for gd support
LIBPNG=no
AC_CHECK_LIB(png, png_create_read_struct , [LIBPNG=yes])

LIBJPEG=no
AC_CHECK_LIB(jpeg, jpeg_CreateCompress, [LIBJPEG=yes])

LIBGD_GIF=no
AC_CHECK_LIB(gd, gdImageGif,[LIBGD_GIF=yes])

LIBGD_PNG=no
AC_CHECK_LIB(gd, gdImagePng, [LIBGD_JPG=yes])

LIBGD_JPG=no
AC_CHECK_LIB(gd, gdImageJpeg, [LIBGD_JPG=yes])

AC_MSG_CHECKING(compile with gd)
if test "$GD" != "no"; then
  GD=no
  if test "$ZLIB" = "no"; then
    echo "you need to install zlib"
  else
    if test "$LIBPNG" = "no"; then
      echo "you need to install libpng"
    else
      if test "$LIBJPEG" = "no"; then
        echo "you need to install libjpeg"
      else
        if test "$LIBGD_PNG" = "yes"; then
          echo "you need to install gd (libgd-dev)"
        else
          if test "$LIBGD_JPG" = "yes"; then
            GD=yes
          fi
        fi
      fi
    fi
  fi
fi
if test "$GD" != "no"; then
  HAS_GD=true
  cp -f ../src/daemon/common/commonGraphics.gd.ml ../src/daemon/common/commonGraphics.ml
  AC_MSG_RESULT(yes)
else
  HAS_GD=false
  cp -f ../src/daemon/common/commonGraphics.nogd.ml ../src/daemon/common/commonGraphics.ml
  AC_MSG_RESULT(no)
fi

MD4ARCH=$arch
case $host in
  i386-pc-linux*) MD4COMP=as; MD4ARCH=i386;;
  i486-pc-linux*) MD4COMP=as; MD4ARCH=i486;;
  i586-pc-linux*) MD4COMP=as; MD4ARCH=i586;;
  i686-pc-linux*) MD4COMP=as; MD4ARCH=i686;;
  i386-pc-mingw32*) MD4COMP=cc; MD4ARCH=i386;;
  i486-pc-mingw32*) MD4COMP=cc; MD4ARCH=i486;;
  i586-pc-mingw32*) MD4COMP=cc; MD4ARCH=i586;;
  i686-pc-mingw32*) MD4COMP=cc; MD4ARCH=i686;;
  i386-*-*bsd*) MD4COMP=as; MD4ARCH=i386;;
  i486-*-*bsd*) MD4COMP=as; MD4ARCH=i486;;
  i586-*-*bsd*) MD4COMP=as; MD4ARCH=i586;;
  i686-*-*bsd*) MD4COMP=as; MD4ARCH=i686;;
  *) MD4COMP=cc;;
esac

ARCH=$arch

case "$OCAMLVERSION" in
  3.06* | 3.07* | 3.08* ) TYPE_FORMAT="";;
  *) TYPE_FORMAT="type ('a,'b,'c) ml_format = ('a,'b, 'c,'c) format4  type ('a,'b,'c) format = ('a,'b, 'c) ml_format";;
esac		    

if test "$OS_FILES" = "mingw"; then
   OCAMLDEP_OPTIONS="-slash"
fi

TMK=no

AC_CHECK_FILE(../src/pic/picMain.ml,EXTRA_DIRS="$EXTRA_DIRS src/pic", )
AC_CHECK_FILE(../src/spider/ecrawler/spiderMain.ml,EXTRA_DIRS="$EXTRA_DIRS src/spider/ecrawler src/spider/analyser1", )
AC_CHECK_FILE(../src/spider/disasm/mldisasm.ml,EXTRA_DIRS="$EXTRA_DIRS src/spider/disasm src/spider/tmk", )
AC_CHECK_FILE(../src/spider/tmk/tmkSimple.ml,TMK=yes, )
AC_CHECK_FILE(../src/btview/btviewMain.ml,EXTRA_DIRS="$EXTRA_DIRS src/btview", )
AC_CHECK_FILE(../src/cluster/clusterMain.ml,EXTRA_DIRS="$EXTRA_DIRS src/cluster", )

AC_CHECK_FILE(../src/networks/fasttrack/fasttrackSupernode.ml,SUPERNODES="yes", )



if test "$SWARMING1" = "yes"; then
    COMMONSWARMING=CommonSwarming1
else
    COMMONSWARMING=CommonSwarming2
fi


AC_SUBST(LIBS)
AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)
AC_SUBST(CC)
AC_SUBST(CPP)
AC_SUBST(CONFIG_INCLUDES)

AC_SUBST(EXTRA_DIRS)

AC_SUBST(TYPE_FORMAT)
AC_SUBST(OCAMLC)
AC_SUBST(OCAMLOPT)
AC_SUBST(OCAMLLEX)
AC_SUBST(OCAMLYACC)
AC_SUBST(OCAMLDEP)
AC_SUBST(OCAMLDEP_OPTIONS)
AC_SUBST(CAMLP4)
AC_SUBST(PERL)
AC_SUBST(OCAMLMKTOP)
AC_SUBST(SYSTEM)

AC_SUBST(SHA1_VERSION)
AC_SUBST(MORE_TARGETS)
AC_SUBST(MORE_SUBDIRS)
AC_SUBST(LABLGL_CMA)
AC_SUBST(LABLGL_CMXA)
AC_SUBST(CURRENT_DIR)
AC_SUBST(MD4ARCH)
AC_SUBST(MD4COMP)
AC_SUBST(ZLIB)
AC_SUBST(GD)
AC_SUBST(ICONV)

AC_SUBST(AUDIO_GALAXY)
AC_SUBST(OPEN_NAPSTER)
AC_SUBST(DIRECT_CONNECT)
AC_SUBST(GNUTELLA)
AC_SUBST(GNUTELLA2)
AC_SUBST(BITTORRENT)
AC_SUBST(FILETP)
AC_SUBST(SOULSEEK)
AC_SUBST(OPENFT)
AC_SUBST(FASTTRACK)
AC_SUBST(DONKEY)
AC_SUBST(OPEN_DONKEY)
AC_SUBST(DONKEY_SERVER)
AC_SUBST(CYMES)
AC_SUBST(ARES)
AC_SUBST(BROOSNET)

AC_SUBST(DEVEL)
AC_SUBST(JABBR)

AC_SUBST(BUILD_NEWGUI)

AC_SUBST(SUPERNODES)

AC_SUBST(OCAMLOPT_DIL)
AC_SUBST(COMPILE_GUI)
AC_SUBST(REQUIRED_OCAML)
AC_SUBST(REQUIRED_LABLGTK)
AC_SUBST(ARCH)
AC_SUBST(PATCHED_OCAMLOPT)
AC_SUBST(COMPRESS)
AC_SUBST(COMPRESS_EXT)
AC_SUBST(RELEASENAME)
AC_SUBST(CHECKBOUNDS)
AC_SUBST(CURRENT_VERSION)
AC_SUBST(CURRENT_RELEASE)
AC_SUBST(GTOOLBOX_POPUPMENU)
AC_SUBST(OS_FILES)
AC_SUBST(OS_FILES2)
AC_SUBST(MYCONFIG_ARGS)
AC_SUBST(MYCONFIG_ARGS_DEFINED)
AC_SUBST(TARGET_TYPE)
AC_SUBST(RPMBUILD)

AC_SUBST(TMK)
AC_SUBST(GTK)
AC_SUBST(USE_GTK2)
AC_SUBST(GTKCFLAGS)
AC_SUBST(GTKLLIBS)
AC_SUBST(GTKLFLAGS)
AC_SUBST(HAS_GD)
AC_SUBST(HAS_ZLIB)
AC_SUBST(ZLIB__UNCOMPRESS_STRING2)
AC_SUBST(ZLIB__COMPRESS_STRING)
AC_SUBST(ZLIB__GZIP_STRING)

AC_SUBST(COMMONSWARMING)

BUILD_SYSTEM1="`uname -s` `uname -m` `uname -r`"
BUILD_SYSTEM2="`$OCAMLC -version`"
BUILD_SYSTEM4=""
if test "$BUILD_SYSTEM3" != ""; then BUILD_SYSTEM4="using glibc $BUILD_SYSTEM3"; fi
BUILD_SYSTEM="Ocaml $BUILD_SYSTEM2 on $BUILD_SYSTEM1 $BUILD_SYSTEM4"
AC_SUBST(BUILD_SYSTEM)

AUTOCONF=../src/utils/lib/autoconf.ml
GTK_AUTOCONF=../src/utils/lib/gAutoconf.ml
SWARMING=../src/daemon/common/commonDownloads.ml
AC_OUTPUT(\
  Makefile.config \
  mldonkey.rc \
  $AUTOCONF.new $GTK_AUTOCONF.new $SWARMING \
   ../packages/rpm/mldonkey.spec \
   ../packages/rpm/Makefile \
   ../packages/windows/mlnet.nsi)
diff $AUTOCONF.new $AUTOCONF 2> /dev/null > /dev/null || cp -f $AUTOCONF.new $AUTOCONF
diff $GTK_AUTOCONF.new $GTK_AUTOCONF 2> /dev/null > /dev/null || cp -f $GTK_AUTOCONF.new $GTK_AUTOCONF



cd ..

if test "$OS_FILES2" = "mingw"; then
   echo "compiling win32 resource file"
   windres -o resfile.o config/mldonkey.rc
fi

if test "$OS_FILES2" = "cygwin"; then
   echo "compiling win32 resource file"
   windres -o resfile.o config/mldonkey.rc
fi

echo "Building dependencies (if it blocks, try '$GNU_MAKE depend' to see the problem)"
$GNU_MAKE depend 2> /dev/null > /dev/null || echo "Building dependencies fails: try: '$GNU_MAKE depend'"


echo "The following modules will not be compiled: {" $BAD_TARGETS "}"
