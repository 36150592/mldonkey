AC_REVISION($Revision$)
AC_PREREQ(2.0)
AC_INIT(Makefile.config.in)
AC_CONFIG_HEADER(config.h)

REQUIRED_OCAML=3.05
REQUIRED_LABLGTK=1.2.4

touch install-sh

BATCH=no
AC_ARG_ENABLE(batch, [--enable-batch:       reply YES to all queries in this script], [BATCH="$enableval"])

MULTINET=yes
AC_ARG_ENABLE(multinet, [--disable-multinet:       allows you to only compile support for edonkey], [MULTINET="$enableval"])

AUDIO_GALAXY=yes
AC_ARG_ENABLE(audiogalaxy, [--disable-audiogalaxy:       allows you to remove support for Audio Galaxy], [AUDIO_GALAXY="$enableval"])

OPEN_NAPSTER=yes
AC_ARG_ENABLE(opennap, [--disable-opennap:       allows you to remove support for Open Napster], [OPEN_NAPSTER="$enableval"])

LIMEWIRE=yes
AC_ARG_ENABLE(limewire, [--disable-limewire:       allows you to remove support for LimeWire], [LIMEWIRE="$enableval"])

DIRECT_CONNECT=yes
AC_ARG_ENABLE(directconnect, [--disable-directconnect:       allows you to remove support for Direct Connect], [DIRECT_CONNECT="$enableval"])

SOULSEEK=yes
AC_ARG_ENABLE(soulseek, [--disable-soulseek:       allows you to remove support for SoulSeek], [SOULSEEK="$enableval"])

OPENFT=yes
AC_ARG_ENABLE(openft, [--disable-openft:       allows you to remove support for OpenFT], [OPENFT="$enableval"])

DONKEY=yes
AC_ARG_ENABLE(donkey, [--disable-donkey:       allows you to remove support for eDonkey], [DONKEY="$enableval"])

AC_CANONICAL_HOST
AC_PROG_CC
AC_EXEEXT
AC_PROG_CPP

AC_PROG_RANLIB

OCAML_PATH=

AC_CHECK_PROG(GNU_MAKE, gmake, gmake)
AC_CHECK_PROG(GNU_MAKE, make, make)

AC_CHECK_PROG(OCAMLC, ocamlc.opt, ocamlc.opt)
AC_CHECK_PROG(OCAMLC, ocamlc, ocamlrun ocamlc)

cd ..
SOURCE_DIR=`pwd`
cd config

LOCAL=$SOURCE_DIR/patches/local/

LOCAL_OCAML=$LOCAL/bin

test -z "$ac_cv_prog_OCAMLC" && { 

  AC_CHECK_FILE("$LOCAL_OCAML"/ocamlc.opt, [
    OCAMLC=$LOCAL_OCAML/ocamlc.opt
    ac_cv_prog_OCAMLC=$LOCAL_OCAML/ocamlc.opt
  ],[

  echo "********  Objective-Caml is required  *********" 1>&2; 
  echo "*******  Check http://ocaml.inria.fr/  ********" 1>&2; 
  echo "Do you want this script to try to download and install ocaml"
  echo "LOCALLY in mldonkey directory ?"
  if test "$BATCH" = "no"; then read i; else i=yes; fi
  case "$i" in
   y* | Y*) 
      cd ../patches
      rm -rf ocaml-"$REQUIRED_OCAML"
      if ! test -f ocaml-"$REQUIRED_OCAML".tar.gz; then
        echo Downloading ...

        wget http://caml.inria.fr/distrib/ocaml-"$REQUIRED_OCAML".tar.gz
      fi
      if ! test -f ocaml-"$REQUIRED_OCAML".tar.gz; then exit 1; fi
      echo Uncompressing ...
      gzip -cd ocaml-"$REQUIRED_OCAML".tar.gz | tar xf -
      cd ocaml-"$REQUIRED_OCAML"
      if test -f ../ocaml-"$REQUIRED_OCAML".patch; then
        echo Patching ...
        patch -p1 < ../ocaml-"$REQUIRED_OCAML".patch
      fi
      echo Configuring ...
      ./configure -prefix $LOCAL
      cd config
      cp -f Makefile Makefile.old
      sed "s/OTHERLIBRARIES=.*/OTHERLIBRARIES=unix dynlink num str bigarray threads/" Makefile.old > Makefile
      cd ..
      echo Compiling ...
      $GNU_MAKE world opt opt.opt
      echo Installing ...
      $GNU_MAKE install
      cd ..
      rm -rf ocaml-"$REQUIRED_OCAML"
      cd ../config
      echo Ocaml locally installed for mldonkey

      if test -f "$LOCAL_OCAML"/ocamlc.opt; then
         OCAMLC=$LOCAL_OCAML/ocamlc.opt
         ac_cv_prog_OCAMLC=$LOCAL_OCAML/ocamlc.opt
      else
        echo "Ocaml installation failed"; exit 1
      fi
      ;;
   *)  exit 1;;
  esac
  ])

}

if test "$OCAMLC" = "$LOCAL_OCAML"/ocamlc.opt ; then
  OCAML_PATH="$LOCAL_OCAML"/
  OCAMLOPT=$LOCAL_OCAML/ocamlopt.opt
  OCAMLDEP=$LOCAL_OCAML/ocamldep
  OCAMLLEX=$LOCAL_OCAML/ocamllex.opt
  OCAMLYACC=$LOCAL_OCAML/ocamlyacc
  CAMLP4=$LOCAL_OCAML/camlp4
else
  AC_CHECK_PROG(OCAMLOPT, ocamlopt.opt, ocamlopt.opt)
  AC_CHECK_PROG(OCAMLDEP, ocamldep, ocamldep)
  AC_CHECK_PROG(OCAMLLEX, ocamllex.opt, ocamllex.opt)
  AC_CHECK_PROG(OCAMLLEX, ocamllex, ocamllex)
  AC_CHECK_PROG(OCAMLYACC, ocamlyacc, ocamlyacc)
  AC_CHECK_PROG(CAMLP4, camlp4, camlp4)
fi

OCAMLVERSION=`$OCAMLC -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
echo "ocamlc version is $OCAMLVERSION"

test "$OCAMLVERSION" = "$REQUIRED_OCAML" || {
  echo "********  Version $REQUIRED_OCAML of Objective-Caml is required  *********" 1>&2; 
  echo "*******  Check http://ocaml.inria.fr/  ********" 1>&2; 
  exit 1; } 


OCAMLOPTVERSION=`$OCAMLOPT -v | sed -n -e 's|.*version* *\(.*\)$|\1|p' `
echo "ocamlopt version is $OCAMLOPTVERSION"

test "$OCAMLOPTVERSION" = "$OCAMLVERSION" || {
  echo "********  Version $REQUIRED_OCAML of ocamlopt is required  *********" 1>&2; 
  echo "*******  Check http://ocaml.inria.fr/  ********" 1>&2; 
  exit 1; } 


# Sizes of various common basic types
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(void *)
AC_CHECK_SIZEOF(char)
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(float)
AC_CHECK_SIZEOF(double)

# various header files
AC_CHECK_HEADERS(arpa/inet.h,,)

# On linux plaforms, we will have to check that includes from kernel are
# available.
case $host in
        *linux*)   
           AC_CHECK_HEADERS(linux/limits.h,,
             OLD_CPPFLAGS=$CPPFLAGS
             CPPFLAGS="-I /usr/src/linux/include"
             AC_CHECK_HEADER(linux/types.h,[CONFIG_INCLUDES="-I /usr/src/linux/include"])
             CPPFLAGS=$OLD_CPPFLAGS
           )
        ;;
        *)         ;;
esac

MD4ARCH=`uname -m`
case $host in
  i486-pc-linux*) MD4COMP=as; MD4ARCH=i486;;
  i586-pc-linux*) MD4COMP=as; MD4ARCH=i586;;
  i686-pc-linux*) MD4COMP=as; MD4ARCH=i686;;
  *) MD4COMP=cc;;
esac

AC_MSG_CHECKING(Additionnal includes) 
AC_MSG_RESULT($CONFIG_INCLUDES)

OCAMLLIB=`$OCAMLC -where`

if test -f $OCAMLLIB/lablgl.cma; then
  LABLGL_CMA=lablgl.cma
fi

if test -f $OCAMLLIB/lablgl.cmxa; then
  LABLGL_CMXA=lablgl.cmxa
fi


if test "$MULTINET" = "yes" ; then

  if test "$AUDIO_GALAXY" = "yes" ; then
    AC_CHECK_FILE(../audio_galaxy,AUDIO_GALAXY=yes, [
      AUDIO_GALAXY=no
      BAD_TARGETS="$BAD_TARGETS audio_galaxy"
    ])
  else
    BAD_TARGETS="$BAD_TARGETS audio_galaxy"
  fi

  if test "$OPEN_NAPSTER" = "yes" ; then
    AC_CHECK_FILE(../opennap,OPEN_NAPSTER=yes, [
      OPEN_NAPSTER=no
      BAD_TARGETS="$BAD_TARGETS open_napster"
    ])
  else
    BAD_TARGETS="$BAD_TARGETS open_napster"
  fi

  if test "$DIRECT_CONNECT" = "yes" ; then
    AC_CHECK_FILE(../direct_connect,DIRECT_CONNECT=yes, [
      DIRECT_CONNECT=no
      BAD_TARGETS="$BAD_TARGETS direct_connect"
    ])
  else
    BAD_TARGETS="$BAD_TARGETS direct_connect"
  fi

  if test "$LIMEWIRE" = "yes" ; then
    AC_CHECK_FILE(../limewire,LIMEWIRE=yes, [
      LIMEWIRE=no
      BAD_TARGETS="$BAD_TARGETS limewire"
    ])
  else
    BAD_TARGETS="$BAD_TARGETS limewire"
  fi

  if test "$SOULSEEK" = "yes" ; then
    AC_CHECK_FILE(../soulseek,SOULSEEK=yes, [
      SOULSEEK=no
      BAD_TARGETS="$BAD_TARGETS soulseek"
    ])
  else
    BAD_TARGETS="$BAD_TARGETS soulseek"
  fi

  if test "$OPENFT" = "yes" ; then
    AC_CHECK_FILE(../openFT,OPENFT=yes, [
      OPENFT=no
      BAD_TARGETS="$BAD_TARGETS openFT"
    ])
  else
    BAD_TARGETS="$BAD_TARGETS openFT"
  fi

else
  AUDIO_GALAXY=no
  OPEN_NAPSTER=no
  DIRECT_CONNECT=no
  LIMEWIRE=no
  SOULSEEK=no
  OPENFT=no

  BAD_TARGETS="$BAD_TARGETS audio_galaxy open_napster direct_connect limewire soulseek"
fi

if test "$DONKEY" = "yes" ; then

OCAMLOPT_DIL=no 
AC_MSG_CHECKING($OCAMLOPT supports -dil option)
($OCAMLOPT -help 2>&1 | grep -e -dil > /dev/null) && OCAMLOPT_DIL=yes
AC_MSG_RESULT($OCAMLOPT_DIL)

test "$OCAMLOPT_DIL" = "no" && {
  PATCHED_OCAMLOPT=ocamlopt-$REQUIRED_OCAML/ocamlopt
  OCAMLOPT=ocamlopt-$REQUIRED_OCAML/ocamlopt
  OCAMLOPT_DIL=yes
  echo "Need to build patched ocamlopt for eDonkey support"
}

AC_CHECK_FILE(../secret, [
  AC_CHECK_FILE(../donkey,[
    DONKEY=yes
    AC_CHECK_FILE(../server,DONKEY_SERVER=yes, [
      DONKEY_SERVER=no
      BAD_TARGETS="$BAD_TARGETS donkey_server"
    ])
  ], [
    DONKEY_SERVER=no
    BAD_TARGETS="$BAD_TARGETS donkey_server donkey_client"
  ])
 ],[
  DONKEY=no
  if test "$OCAMLOPT_DIL" = "yes"; then
    AC_CHECK_FILE(../donkey/donkey.lam, OPEN_DONKEY=yes, OPEN_DONKEY=no)
  fi
  if test "$OPEN_DONKEY" = "no"; then
      BAD_TARGETS="$BAD_TARGETS open_donkey"
  fi
])
  else
      BAD_TARGETS="$BAD_TARGETS donkey_server closed_donkey open_donkey"
fi


AC_CHECK_PROG(GTK_CONFIG, gtk-config, gtk-config, no)
if test "$GTK_CONFIG" = "no"; then
     LABLGTK_CONFIG=no
else
  AC_MSG_CHECKING(Checking for native code lablgtk)
  if test -f `$OCAMLC -where`/lablgtk/lablgtk.cmxa; then
     AC_MSG_RESULT(yes)
     LABLGTK_CONFIG=yes
  else
     AC_MSG_RESULT(no)
     LABLGTK_CONFIG=no
     if test -f `$OCAMLC -where`/lablgtk/lablgtk.cma; then
       echo "--------------------------------"
       echo "Lablgtk is not installed properly. See the INSTALL.txt"
       echo "file of mldonkey to see how to compile lablgtk. You"
       echo "probably forgot to call 'make opt' before 'make install'."
       echo "--------------------------------"
     else
       echo "Do you want this script to try to download and install lablgtk"
       echo "LOCALLY in mldonkey directory ?"
       if test "$BATCH" = "no"; then read i; else i=yes; fi
       case "$i" in
        y* | Y*) 
         cd ../patches
         rm -rf lablgtk-"$REQUIRED_LABLGTK"
         if ! test -f lablgtk-"$REQUIRED_LABLGTK".tar.gz; then
           echo Downloading ...
           wget http://wwwfun.kurims.kyoto-u.ac.jp/soft/olabl/dist/lablgtk-"$REQUIRED_LABLGTK".tar.gz
         fi
         if ! test -f lablgtk-"$REQUIRED_LABLGTK".tar.gz; then exit 1; fi
         echo Uncompressing ...
         gzip -cd lablgtk-"$REQUIRED_LABLGTK".tar.gz | tar xf -
         (cd lablgtk-"$REQUIRED_LABLGTK"
          PATH=$OCAML_PATH:$PATH
          export PATH
          echo $PATH
          $GNU_MAKE configure
          $GNU_MAKE
          $GNU_MAKE opt  
          $GNU_MAKE install
          cd ..
          rm -rf lablgtk-"$REQUIRED_LABLGTK"
         )
         cd ../config
         LABLGTK_CONFIG=yes
         ;;
        *);;
      esac
     fi
  fi
fi

AC_MSG_CHECKING(compile GTK GUI)
  if test "$LABLGTK_CONFIG" = "no"; then
        AC_MSG_RESULT(no)
        BAD_TARGETS="$BAD_TARGETS mldonkey_gui\$(EXE) mldonkey_gui2\$(EXE) mlchat\$(EXE)"
        COMPILE_GUI=no
  else
        MORE_TARGETS="$MORE_TARGETS mldonkey_gui\$(EXE) mldonkey_gui2\$(EXE) mlchat\$(EXE)"
        GTK_LIBS=`$GTK_CONFIG --libs`
        GTK_CFLAGS=`$GTK_CONFIG --cflags`
        GTK_VERSION=`$GTK_CONFIG --version`
        COMPILE_GUI=yes
        AC_MSG_RESULT(yes)
  fi

case "`uname -s`" in
  *win32* | *WIN32*) CURRENT_DIR="";;
  *) CURRENT_DIR="./";;
esac

case "$host" in
  alpha*-*-osf*)                arch=alpha; system=digital;;
  alpha*-*-linux*)              arch=alpha; system=linux;;
  alpha*-*-freebsd*)            arch=alpha; system=freebsd;;
  alpha*-*-netbsd*)             arch=alpha; system=netbsd;;
  alpha*-*-openbsd*)            arch=alpha; system=openbsd;;
  sparc-*-sunos4.*)             arch=sparc; system=sunos;;
  sparc-*-solaris2.*)           arch=sparc; system=solaris;;
  sparc-*-*bsd*)                arch=sparc; system=bsd;;
  sparc-*-linux*)               arch=sparc; system=linux;;
  i?86-*-linux*)           arch=i386; system=linux;;
  i?86-*-*bsd*)            arch=i386; system=bsd;;
  i?86-*-nextstep*)        arch=i386; system=nextstep;;
  i?86-*-solaris*)         arch=i386; system=solaris;;
  i?86-*-beos*)            arch=i386; system=beos;;
  i?86-*-cygwin*)          arch=i386; system=cygwin;;
  mips-*-irix6*)                arch=mips; system=irix;;
  hppa1.1-*-hpux*)              arch=hppa; system=hpux;;
  hppa1.1-*-nextstep*)          arch=hppa; system=nextstep;;
  rs6000-*-aix*)                arch=power; model=rs6000; system=aix;;
  powerpc-*-aix*)               arch=power; model=ppc; system=aix;;
  powerpc-*-linux*)             arch=power; model=ppc; system=elf;;
  powerpc-*-rhapsody*)          arch=power; model=ppc; system=rhapsody;;
  powerpc-*-darwin*)            arch=power; model=ppc; system=rhapsody;;
  arm*-*-linux*)                arch=arm; system=linux;;
  ia64-*-linux*)                arch=ia64; system=linux;;
esac

ARCH=$arch

AC_SUBST(OCAMLC)
AC_SUBST(OCAMLOPT)
AC_SUBST(OCAMLLEX)
AC_SUBST(OCAMLYACC)
AC_SUBST(OCAMLDEP)
AC_SUBST(CAMLP4)

AC_SUBST(MORE_TARGETS)
AC_SUBST(MORE_SUBDIRS)
AC_SUBST(LABLGL_CMA)
AC_SUBST(LABLGL_CMXA)
AC_SUBST(CONFIG_INCLUDES)
AC_SUBST(CURRENT_DIR)
AC_SUBST(MD4ARCH)
AC_SUBST(MD4COMP)

AC_SUBST(AUDIO_GALAXY)
AC_SUBST(OPEN_NAPSTER)
AC_SUBST(DIRECT_CONNECT)
AC_SUBST(LIMEWIRE)
AC_SUBST(SOULSEEK)
AC_SUBST(OPENFT)
AC_SUBST(DONKEY)
AC_SUBST(OPEN_DONKEY)
AC_SUBST(DONKEY_SERVER)

AC_SUBST(OCAMLOPT_DIL)
AC_SUBST(COMPILE_GUI)
AC_SUBST(REQUIRED_OCAML)
AC_SUBST(REQUIRED_LABLGTK)
AC_SUBST(ARCH)
AC_SUBST(PATCHED_OCAMLOPT)

AC_OUTPUT(Makefile.config ../lib/autoconf.ml)


echo "Will not be compiled: {" $BAD_TARGETS "}"

