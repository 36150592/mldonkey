diff -r -C 2 ocaml-3.04.orig/.depend ocaml-3.04/.depend
*** ocaml-3.04.orig/.depend	Tue Oct 30 10:33:32 2001
--- ocaml-3.04/.depend	Sat Feb 16 17:39:33 2002
***************
*** 77,81 ****
  typing/typecore.cmi: parsing/asttypes.cmi typing/env.cmi typing/ident.cmi \
      parsing/location.cmi parsing/longident.cmi parsing/parsetree.cmi \
!     typing/typedtree.cmi typing/types.cmi 
  typing/typedecl.cmi: typing/env.cmi typing/ident.cmi parsing/location.cmi \
      parsing/longident.cmi parsing/parsetree.cmi typing/path.cmi \
--- 77,81 ----
  typing/typecore.cmi: parsing/asttypes.cmi typing/env.cmi typing/ident.cmi \
      parsing/location.cmi parsing/longident.cmi parsing/parsetree.cmi \
!     typing/path.cmi typing/typedtree.cmi typing/types.cmi 
  typing/typedecl.cmi: typing/env.cmi typing/ident.cmi parsing/location.cmi \
      parsing/longident.cmi parsing/parsetree.cmi typing/path.cmi \
***************
*** 90,94 ****
      typing/primitive.cmi 
  typing/typetexp.cmi: typing/env.cmi parsing/location.cmi \
!     parsing/longident.cmi parsing/parsetree.cmi typing/types.cmi 
  typing/btype.cmo: utils/misc.cmi typing/path.cmi typing/types.cmi \
      typing/btype.cmi 
--- 90,95 ----
      typing/primitive.cmi 
  typing/typetexp.cmi: typing/env.cmi parsing/location.cmi \
!     parsing/longident.cmi parsing/parsetree.cmi typing/path.cmi \
!     typing/types.cmi 
  typing/btype.cmo: utils/misc.cmi typing/path.cmi typing/types.cmi \
      typing/btype.cmi 
***************
*** 233,242 ****
  typing/typetexp.cmo: typing/btype.cmi typing/ctype.cmi typing/env.cmi \
      parsing/location.cmi parsing/longident.cmi utils/misc.cmi \
!     parsing/parsetree.cmi typing/printtyp.cmi utils/tbl.cmi typing/types.cmi \
!     utils/warnings.cmi typing/typetexp.cmi 
  typing/typetexp.cmx: typing/btype.cmx typing/ctype.cmx typing/env.cmx \
      parsing/location.cmx parsing/longident.cmx utils/misc.cmx \
!     parsing/parsetree.cmi typing/printtyp.cmx utils/tbl.cmx typing/types.cmx \
!     utils/warnings.cmx typing/typetexp.cmi 
  bytecomp/bytegen.cmi: bytecomp/instruct.cmi bytecomp/lambda.cmi 
  bytecomp/bytelink.cmi: bytecomp/emitcode.cmi bytecomp/symtable.cmi 
--- 234,243 ----
  typing/typetexp.cmo: typing/btype.cmi typing/ctype.cmi typing/env.cmi \
      parsing/location.cmi parsing/longident.cmi utils/misc.cmi \
!     parsing/parsetree.cmi typing/path.cmi typing/printtyp.cmi utils/tbl.cmi \
!     typing/types.cmi utils/warnings.cmi typing/typetexp.cmi 
  typing/typetexp.cmx: typing/btype.cmx typing/ctype.cmx typing/env.cmx \
      parsing/location.cmx parsing/longident.cmx utils/misc.cmx \
!     parsing/parsetree.cmi typing/path.cmx typing/printtyp.cmx utils/tbl.cmx \
!     typing/types.cmx utils/warnings.cmx typing/typetexp.cmi 
  bytecomp/bytegen.cmi: bytecomp/instruct.cmi bytecomp/lambda.cmi 
  bytecomp/bytelink.cmi: bytecomp/emitcode.cmi bytecomp/symtable.cmi 
***************
*** 604,615 ****
      driver/main_args.cmx utils/warnings.cmx driver/main.cmi 
  driver/optcompile.cmo: asmcomp/asmgen.cmi utils/ccomp.cmi utils/clflags.cmo \
!     asmcomp/compilenv.cmi utils/config.cmi typing/env.cmi \
!     parsing/location.cmi utils/misc.cmi parsing/parse.cmi \
      parsing/printast.cmi bytecomp/printlambda.cmi typing/printtyp.cmi \
      bytecomp/simplif.cmi bytecomp/translmod.cmi typing/typedtree.cmi \
      typing/typemod.cmi utils/warnings.cmi driver/optcompile.cmi 
  driver/optcompile.cmx: asmcomp/asmgen.cmx utils/ccomp.cmx utils/clflags.cmx \
!     asmcomp/compilenv.cmx utils/config.cmx typing/env.cmx \
!     parsing/location.cmx utils/misc.cmx parsing/parse.cmx \
      parsing/printast.cmx bytecomp/printlambda.cmx typing/printtyp.cmx \
      bytecomp/simplif.cmx bytecomp/translmod.cmx typing/typedtree.cmx \
--- 605,616 ----
      driver/main_args.cmx utils/warnings.cmx driver/main.cmi 
  driver/optcompile.cmo: asmcomp/asmgen.cmi utils/ccomp.cmi utils/clflags.cmo \
!     asmcomp/compilenv.cmi utils/config.cmi typing/env.cmi typing/ident.cmi \
!     bytecomp/lambda.cmi parsing/location.cmi utils/misc.cmi parsing/parse.cmi \
      parsing/printast.cmi bytecomp/printlambda.cmi typing/printtyp.cmi \
      bytecomp/simplif.cmi bytecomp/translmod.cmi typing/typedtree.cmi \
      typing/typemod.cmi utils/warnings.cmi driver/optcompile.cmi 
  driver/optcompile.cmx: asmcomp/asmgen.cmx utils/ccomp.cmx utils/clflags.cmx \
!     asmcomp/compilenv.cmx utils/config.cmx typing/env.cmx typing/ident.cmx \
!     bytecomp/lambda.cmx parsing/location.cmx utils/misc.cmx parsing/parse.cmx \
      parsing/printast.cmx bytecomp/printlambda.cmx typing/printtyp.cmx \
      bytecomp/simplif.cmx bytecomp/translmod.cmx typing/typedtree.cmx \
diff -r -C 2 ocaml-3.04.orig/driver/optcompile.ml ocaml-3.04/driver/optcompile.ml
*** ocaml-3.04.orig/driver/optcompile.ml	Mon Jul  2 16:25:28 2001
--- ocaml-3.04/driver/optcompile.ml	Sat Feb 16 17:31:03 2002
***************
*** 102,105 ****
--- 102,212 ----
  (* Compile a .mli file *)
  
+ let input_lambda = ref false  
+ let output_lambda = ref false
+ 
+   
+ module ObscurLambda = struct
+     open Lambda
+     
+     let find_fv fvs id =
+       try
+         List.assoc id fvs
+       with _ -> id
+     
+     let make_id fvs id = 
+       if not (Ident.persistent id) then
+         let new_id = Ident.create "" in
+         fvs := (id, new_id) :: !fvs;
+         new_id
+       else
+         id
+     
+     let rec shorten_lambda fvs l = 
+       match l with
+         Lvar id -> Lvar (find_fv fvs id)
+       | Lapply (l1, list) -> 
+           Lapply (shorten_lambda fvs l1, 
+             List.map (shorten_lambda fvs) list)
+       | Lfunction (kind, ids, l1) -> 
+           let fvs = ref fvs in
+           let ids = List.map (make_id fvs) ids in
+           Lfunction (kind, ids, shorten_lambda !fvs l1)
+       | Llet (kind, id, l1, l2) ->
+           let old_fvs = fvs in
+           let fvs = ref fvs in
+           let id = make_id fvs id in
+           Llet(kind, id, shorten_lambda old_fvs l1, 
+             shorten_lambda !fvs l2)
+       | Lletrec (idls, l1) -> 
+           let fvs = ref fvs in
+           let idls = List.map (fun (id, l) ->
+                 make_id fvs id, l) idls in
+           let idls = List.map (fun (id, l) ->
+                 id, shorten_lambda !fvs l) idls in
+           Lletrec (idls, shorten_lambda !fvs l1)
+       | Lprim (prim, list) ->
+           Lprim (prim, List.map (shorten_lambda fvs) list)
+       
+       | Lswitch (l1, sw) -> (* sw contains lambdas *)
+           Lswitch (shorten_lambda fvs l1, 
+             { sw_numconsts = sw.sw_numconsts;
+               sw_consts = List.map (fun (n,l) -> n
+                     , shorten_lambda fvs l) sw.sw_consts;
+               sw_numblocks = sw.sw_numblocks;
+               sw_blocks = List.map (fun (n,l) -> n
+                     , shorten_lambda fvs l) sw.sw_blocks;
+               sw_failaction = match sw.sw_failaction with
+                 None -> None
+               | Some l -> Some (shorten_lambda fvs l);
+             })
+       | Lstaticraise (n, list) ->
+           Lstaticraise (n, List.map (shorten_lambda fvs) list)
+       | Lstaticcatch (l1, (n,ids), l2) ->
+           let old_fvs = fvs in
+           let fvs = ref fvs in
+           let ids = List.map (make_id fvs) ids in
+           Lstaticcatch(shorten_lambda old_fvs l1,
+             (n, ids), shorten_lambda !fvs l2)
+       | Ltrywith (l1, id, l2) ->
+           let old_fvs = fvs in
+           let fvs = ref fvs in
+           let id = make_id fvs id in
+           Ltrywith (shorten_lambda old_fvs l1, id, shorten_lambda !fvs l2)
+       | Lifthenelse (l1, l2, l3) ->
+           Lifthenelse(shorten_lambda fvs l1, shorten_lambda fvs l2,
+             shorten_lambda fvs l3)
+       | Lsequence (l1, l2) ->
+           Lsequence (shorten_lambda fvs l1, shorten_lambda fvs l2)
+       | Lwhile (l1, l2) ->
+           Lwhile (shorten_lambda fvs l1, shorten_lambda fvs l2)
+       | Lfor (id, l1, l2, dir, l3) ->
+           let old_fvs = fvs in
+           let fvs = ref fvs in
+           let id = make_id fvs id in
+           Lfor(id, shorten_lambda old_fvs l1, shorten_lambda old_fvs l2,
+             dir, shorten_lambda !fvs l3)
+       | Lassign (id, l1) ->
+           Lassign(find_fv fvs id, shorten_lambda fvs l1)
+       | Lsend (l1, l2, list) ->
+           Lsend(shorten_lambda fvs l1, shorten_lambda fvs l2, 
+             List.map (shorten_lambda fvs) list)
+       | Levent (l1, event) ->
+           Levent(shorten_lambda fvs l1, event)
+       | Lifused (id, l1) ->
+           Lifused (find_fv fvs id, shorten_lambda fvs l1)
+       | _ -> l
+           
+   end
+   
+ let  save_lambda prefixname (n,l) =
+   if !output_lambda then begin
+       let oc = open_out (prefixname ^ ".lam") in
+       let l = ObscurLambda.shorten_lambda [] l in
+       output_value oc (n,l);
+       close_out oc
+     end;
+   (n,l)
+ 
+   
  let interface ppf sourcefile =
    let prefixname = Filename.chop_extension sourcefile in
***************
*** 127,130 ****
--- 234,251 ----
    let prefixname = Filename.chop_extension sourcefile in
    let modulename = String.capitalize(Filename.basename prefixname) in
+   if !input_lambda then
+     let ic = open_in (prefixname ^ ".lam") in
+     let lam = input_value ic in
+     close_in ic;
+     let env = initial_env() in
+     Compilenv.reset modulename;
+     lam 
+     +++ print_if ppf Clflags.dump_lambda Printlambda.lambda
+     ++ Asmgen.compile_implementation prefixname ppf ;
+     Compilenv.save_unit_info (prefixname ^ ".cmx");
+     Warnings.check_fatal ();
+     
+   else
+   
    let inputfile = preprocess sourcefile in
    let env = initial_env() in
***************
*** 137,140 ****
--- 258,262 ----
    +++ Simplif.simplify_lambda
    +++ print_if ppf Clflags.dump_lambda Printlambda.lambda
+   ++ save_lambda prefixname
    ++ Asmgen.compile_implementation prefixname ppf;
    Compilenv.save_unit_info (prefixname ^ ".cmx");
diff -r -C 2 ocaml-3.04.orig/driver/optcompile.mli ocaml-3.04/driver/optcompile.mli
*** ocaml-3.04.orig/driver/optcompile.mli	Tue Mar  7 06:02:32 2000
--- ocaml-3.04/driver/optcompile.mli	Fri Feb 15 12:47:09 2002
***************
*** 23,24 ****
--- 23,27 ----
  val initial_env: unit -> Env.t
  val init_path: unit -> unit
+ val output_lambda : bool ref
+ val input_lambda : bool ref
+ 
diff -r -C 2 ocaml-3.04.orig/driver/optmain.ml ocaml-3.04/driver/optmain.ml
*** ocaml-3.04.orig/driver/optmain.ml	Thu Sep 27 09:30:15 2001
--- ocaml-3.04/driver/optmain.ml	Fri Feb 15 12:53:50 2002
***************
*** 155,158 ****
--- 155,160 ----
         "-dlinear", Arg.Set dump_linear, " (undocumented)";
         "-dstartup", Arg.Set keep_startup_file, " (undocumented)";
+        "-dol", Arg.Set Optcompile.output_lambda, " (undocumented)";
+        "-dil", Arg.Set Optcompile.input_lambda, " (undocumented)";
         "-", Arg.String (process_file ppf),
              "<file>  Treat <file> as a file name (even if it starts with `-')"
